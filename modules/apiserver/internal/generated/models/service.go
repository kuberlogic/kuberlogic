// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Service service
//
// swagger:model Service
type Service struct {

	// advanced conf
	AdvancedConf AdvancedConf `json:"advancedConf,omitempty"`

	// created at
	// Read Only: true
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// external connection
	ExternalConnection *ServiceExternalConnection `json:"externalConnection,omitempty"`

	// instances
	// Read Only: true
	Instances []*ServiceInstance `json:"instances"`

	// internal connection
	InternalConnection *ServiceInternalConnection `json:"internalConnection,omitempty"`

	// limits
	Limits *Limits `json:"limits,omitempty"`

	// maintenance window
	MaintenanceWindow *MaintenanceWindow `json:"maintenanceWindow,omitempty"`

	// masters
	// Read Only: true
	Masters int64 `json:"masters,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// ns
	// Required: true
	Ns *string `json:"ns"`

	// replicas
	Replicas *int64 `json:"replicas,omitempty"`

	// status
	// Read Only: true
	Status string `json:"status,omitempty"`

	// type
	// Required: true
	// Enum: [postgresql mysql]
	Type *string `json:"type"`
}

// Validate validates this service
func (m *Service) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdvancedConf(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalConnection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstances(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInternalConnection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLimits(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaintenanceWindow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Service) validateAdvancedConf(formats strfmt.Registry) error {

	if swag.IsZero(m.AdvancedConf) { // not required
		return nil
	}

	if err := m.AdvancedConf.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("advancedConf")
		}
		return err
	}

	return nil
}

func (m *Service) validateCreatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Service) validateExternalConnection(formats strfmt.Registry) error {

	if swag.IsZero(m.ExternalConnection) { // not required
		return nil
	}

	if m.ExternalConnection != nil {
		if err := m.ExternalConnection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("externalConnection")
			}
			return err
		}
	}

	return nil
}

func (m *Service) validateInstances(formats strfmt.Registry) error {

	if swag.IsZero(m.Instances) { // not required
		return nil
	}

	for i := 0; i < len(m.Instances); i++ {
		if swag.IsZero(m.Instances[i]) { // not required
			continue
		}

		if m.Instances[i] != nil {
			if err := m.Instances[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("instances" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Service) validateInternalConnection(formats strfmt.Registry) error {

	if swag.IsZero(m.InternalConnection) { // not required
		return nil
	}

	if m.InternalConnection != nil {
		if err := m.InternalConnection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("internalConnection")
			}
			return err
		}
	}

	return nil
}

func (m *Service) validateLimits(formats strfmt.Registry) error {

	if swag.IsZero(m.Limits) { // not required
		return nil
	}

	if m.Limits != nil {
		if err := m.Limits.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("limits")
			}
			return err
		}
	}

	return nil
}

func (m *Service) validateMaintenanceWindow(formats strfmt.Registry) error {

	if swag.IsZero(m.MaintenanceWindow) { // not required
		return nil
	}

	if m.MaintenanceWindow != nil {
		if err := m.MaintenanceWindow.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("maintenanceWindow")
			}
			return err
		}
	}

	return nil
}

func (m *Service) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Service) validateNs(formats strfmt.Registry) error {

	if err := validate.Required("ns", "body", m.Ns); err != nil {
		return err
	}

	return nil
}

var serviceTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["postgresql","mysql"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceTypeTypePropEnum = append(serviceTypeTypePropEnum, v)
	}
}

const (

	// ServiceTypePostgresql captures enum value "postgresql"
	ServiceTypePostgresql string = "postgresql"

	// ServiceTypeMysql captures enum value "mysql"
	ServiceTypeMysql string = "mysql"
)

// prop value enum
func (m *Service) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serviceTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Service) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Service) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Service) UnmarshalBinary(b []byte) error {
	var res Service
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ServiceExternalConnection service external connection
//
// swagger:model ServiceExternalConnection
type ServiceExternalConnection struct {

	// master
	Master *Connection `json:"master,omitempty"`

	// replica
	Replica *Connection `json:"replica,omitempty"`
}

// Validate validates this service external connection
func (m *ServiceExternalConnection) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMaster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplica(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceExternalConnection) validateMaster(formats strfmt.Registry) error {

	if swag.IsZero(m.Master) { // not required
		return nil
	}

	if m.Master != nil {
		if err := m.Master.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("externalConnection" + "." + "master")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceExternalConnection) validateReplica(formats strfmt.Registry) error {

	if swag.IsZero(m.Replica) { // not required
		return nil
	}

	if m.Replica != nil {
		if err := m.Replica.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("externalConnection" + "." + "replica")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceExternalConnection) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceExternalConnection) UnmarshalBinary(b []byte) error {
	var res ServiceExternalConnection
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ServiceInternalConnection service internal connection
//
// swagger:model ServiceInternalConnection
type ServiceInternalConnection struct {

	// master
	Master *Connection `json:"master,omitempty"`

	// replica
	Replica *Connection `json:"replica,omitempty"`
}

// Validate validates this service internal connection
func (m *ServiceInternalConnection) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMaster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplica(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceInternalConnection) validateMaster(formats strfmt.Registry) error {

	if swag.IsZero(m.Master) { // not required
		return nil
	}

	if m.Master != nil {
		if err := m.Master.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("internalConnection" + "." + "master")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceInternalConnection) validateReplica(formats strfmt.Registry) error {

	if swag.IsZero(m.Replica) { // not required
		return nil
	}

	if m.Replica != nil {
		if err := m.Replica.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("internalConnection" + "." + "replica")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceInternalConnection) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceInternalConnection) UnmarshalBinary(b []byte) error {
	var res ServiceInternalConnection
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
