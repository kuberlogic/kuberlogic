// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kuberlogic/kuberlogic/modules/dynamic-apiserver/internal/generated/models"
)

// ServiceAddReader is a Reader for the ServiceAdd structure.
type ServiceAddReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ServiceAddReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewServiceAddCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewServiceAddBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewServiceAddUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewServiceAddForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewServiceAddConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewServiceAddServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewServiceAddCreated creates a ServiceAddCreated with default headers values
func NewServiceAddCreated() *ServiceAddCreated {
	return &ServiceAddCreated{}
}

/* ServiceAddCreated describes a response with status code 201, with default header values.

item created
*/
type ServiceAddCreated struct {
	Payload *models.Service
}

func (o *ServiceAddCreated) Error() string {
	return fmt.Sprintf("[POST /services/][%d] serviceAddCreated  %+v", 201, o.Payload)
}
func (o *ServiceAddCreated) GetPayload() *models.Service {
	return o.Payload
}

func (o *ServiceAddCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Service)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServiceAddBadRequest creates a ServiceAddBadRequest with default headers values
func NewServiceAddBadRequest() *ServiceAddBadRequest {
	return &ServiceAddBadRequest{}
}

/* ServiceAddBadRequest describes a response with status code 400, with default header values.

invalid input, object invalid
*/
type ServiceAddBadRequest struct {
	Payload *models.Error
}

func (o *ServiceAddBadRequest) Error() string {
	return fmt.Sprintf("[POST /services/][%d] serviceAddBadRequest  %+v", 400, o.Payload)
}
func (o *ServiceAddBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *ServiceAddBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServiceAddUnauthorized creates a ServiceAddUnauthorized with default headers values
func NewServiceAddUnauthorized() *ServiceAddUnauthorized {
	return &ServiceAddUnauthorized{}
}

/* ServiceAddUnauthorized describes a response with status code 401, with default header values.

bad authentication
*/
type ServiceAddUnauthorized struct {
}

func (o *ServiceAddUnauthorized) Error() string {
	return fmt.Sprintf("[POST /services/][%d] serviceAddUnauthorized ", 401)
}

func (o *ServiceAddUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewServiceAddForbidden creates a ServiceAddForbidden with default headers values
func NewServiceAddForbidden() *ServiceAddForbidden {
	return &ServiceAddForbidden{}
}

/* ServiceAddForbidden describes a response with status code 403, with default header values.

bad permissions
*/
type ServiceAddForbidden struct {
}

func (o *ServiceAddForbidden) Error() string {
	return fmt.Sprintf("[POST /services/][%d] serviceAddForbidden ", 403)
}

func (o *ServiceAddForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewServiceAddConflict creates a ServiceAddConflict with default headers values
func NewServiceAddConflict() *ServiceAddConflict {
	return &ServiceAddConflict{}
}

/* ServiceAddConflict describes a response with status code 409, with default header values.

item already exists
*/
type ServiceAddConflict struct {
}

func (o *ServiceAddConflict) Error() string {
	return fmt.Sprintf("[POST /services/][%d] serviceAddConflict ", 409)
}

func (o *ServiceAddConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewServiceAddServiceUnavailable creates a ServiceAddServiceUnavailable with default headers values
func NewServiceAddServiceUnavailable() *ServiceAddServiceUnavailable {
	return &ServiceAddServiceUnavailable{}
}

/* ServiceAddServiceUnavailable describes a response with status code 503, with default header values.

internal server error
*/
type ServiceAddServiceUnavailable struct {
	Payload *models.Error
}

func (o *ServiceAddServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /services/][%d] serviceAddServiceUnavailable  %+v", 503, o.Payload)
}
func (o *ServiceAddServiceUnavailable) GetPayload() *models.Error {
	return o.Payload
}

func (o *ServiceAddServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
