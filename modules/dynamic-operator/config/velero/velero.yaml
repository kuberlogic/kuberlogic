---
# Source: velero/templates/backupstoragelocation.yaml
apiVersion: velero.io/v1
kind: BackupStorageLocation
metadata:
  name: default
  namespace: velero
  annotations:
    "helm.sh/hook": post-install,post-upgrade,post-rollback
    "helm.sh/hook-delete-policy": before-hook-creation
  labels:
    app.kubernetes.io/name: velero
    app.kubernetes.io/instance: velero
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: velero-2.31.5
spec:
  provider: aws
  accessMode: ReadWrite
  default: true
  objectStorage:
    bucket: "kuberlogic"
  config:
    region: "minio"
    s3ForcePathStyle: "true"
    s3Url: "http://minio:9000"
---
# Source: velero/templates/serviceaccount-server.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: velero-server
  namespace: velero
  labels:
    app.kubernetes.io/name: velero
    app.kubernetes.io/instance: velero
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: velero-2.31.5
---
# Source: velero/templates/secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: velero
  namespace: velero
  labels:
    app.kubernetes.io/name: velero
    app.kubernetes.io/instance: velero
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: velero-2.31.5
type: Opaque
data:
  cloud: "W2RlZmF1bHRdCm91dHB1dD1qc29uCmF3c19hY2Nlc3Nfa2V5X2lkID0gMGExbERqbGtiYThNOEVhcUdjcDAKYXdzX3NlY3JldF9hY2Nlc3Nfa2V5ID0gNWxUUjFjQUlOVUNwNVYxbGJQQjRqTXNXTmFzdWlUMnNMWU53SjdFQQpyZWdpb24gPSBtaW5pbwo="
---
# Source: velero/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: velero-server
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/name: velero
    app.kubernetes.io/instance: velero
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: velero-2.31.5
subjects:
  - kind: ServiceAccount
    namespace: velero
    name: velero-server
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io
---
# Source: velero/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: velero-server
  namespace: velero
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/name: velero
    app.kubernetes.io/instance: velero
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: velero-2.31.5
rules:
  - apiGroups:
      - "*"
    resources:
      - "*"
    verbs:
      - "*"
---
# Source: velero/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: velero-server
  namespace: velero
  labels:
    app.kubernetes.io/component: server
    app.kubernetes.io/name: velero
    app.kubernetes.io/instance: velero
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: velero-2.31.5
subjects:
  - kind: ServiceAccount
    namespace: velero
    name: velero-server
roleRef:
  kind: Role
  name: velero-server
  apiGroup: rbac.authorization.k8s.io
---
# Source: velero/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: velero
  namespace: velero
  labels:
    app.kubernetes.io/name: velero
    app.kubernetes.io/instance: velero
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: velero-2.31.5
spec:
  type: ClusterIP
  ports:
    - name: http-monitoring
      port: 8085
      targetPort: http-monitoring
  selector:
    name: velero
    app.kubernetes.io/name: velero
    app.kubernetes.io/instance: velero
---
# Source: velero/templates/restic-daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: restic
  namespace: velero
  labels:
    app.kubernetes.io/name: velero
    app.kubernetes.io/instance: velero
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: velero-2.31.5
spec:
  selector:
    matchLabels:
      name: restic
  template:
    metadata:
      labels:
        name: restic
        app.kubernetes.io/name: velero
        app.kubernetes.io/instance: velero
        app.kubernetes.io/managed-by: Helm
        helm.sh/chart: velero-2.31.5
    spec:
      serviceAccountName: velero-server
      securityContext:
        runAsUser: 0
      volumes:
        - name: cloud-credentials
          secret:
            secretName: velero
        - name: host-pods
          hostPath:
            path: /var/lib/kubelet/pods
        - name: scratch
          emptyDir: {}
      dnsPolicy: ClusterFirst
      containers:
        - name: restic
          image: "velero/velero:v1.9.1"
          imagePullPolicy: IfNotPresent
          command:
            - /velero
          args:
            - restic
            - server
          volumeMounts:
            - name: cloud-credentials
              mountPath: /credentials
            - name: host-pods
              mountPath: /host_pods
              mountPropagation: HostToContainer
            - name: scratch
              mountPath: /scratch
          env:
            - name: VELERO_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: VELERO_SCRATCH_DIR
              value: /scratch
            - name: AWS_SHARED_CREDENTIALS_FILE
              value: /credentials/cloud
          securityContext:
            privileged: false
---
# Source: velero/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: velero
  namespace: velero
  labels:
    app.kubernetes.io/name: velero
    app.kubernetes.io/instance: velero
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: velero-2.31.5
    component: velero
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: velero
      app.kubernetes.io/name: velero
  template:
    metadata:
      labels:
        name: velero
        app.kubernetes.io/name: velero
        app.kubernetes.io/instance: velero
        app.kubernetes.io/managed-by: Helm
        helm.sh/chart: velero-2.31.5
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "8085"
        prometheus.io/scrape: "true"
    spec:
      restartPolicy: Always
      serviceAccountName: velero-server
      containers:
        - name: velero
          image: "velero/velero:v1.9.1"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http-monitoring
              containerPort: 8085
          command:
            - /velero
          args:
            - server
          resources: {}
          volumeMounts:
            - name: plugins
              mountPath: /plugins
            - name: cloud-credentials
              mountPath: /credentials
            - name: scratch
              mountPath: /scratch
          env:
            - name: VELERO_SCRATCH_DIR
              value: /scratch
            - name: VELERO_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: LD_LIBRARY_PATH
              value: /plugins
            - name: AWS_SHARED_CREDENTIALS_FILE
              value: /credentials/cloud
      dnsPolicy: ClusterFirst
      initContainers:
        - image: velero/velero-plugin-for-aws:v1.5.0
          name: velero-plugin-for-aws
          volumeMounts:
            - mountPath: /target
              name: plugins
      volumes:
        - name: cloud-credentials
          secret:
            secretName: velero
        - name: plugins
          emptyDir: {}
        - name: scratch
          emptyDir: {}