// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https",
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is a service API",
    "title": "service API",
    "contact": {
      "email": "infra@cloudlinux.com"
    },
    "version": "1.0.0"
  },
  "host": "localhost:8001",
  "basePath": "/api/v1/",
  "paths": {
    "/login": {
      "post": {
        "description": "Login user and return access credentials\n",
        "tags": [
          "auth"
        ],
        "summary": "login user",
        "operationId": "loginUser",
        "parameters": [
          {
            "description": "user credentials",
            "name": "userCredentials",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UserCredentials"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "access token response",
            "schema": {
              "$ref": "#/definitions/AccessTokenResponse"
            }
          },
          "400": {
            "description": "bad input parameters"
          },
          "401": {
            "description": "bad authentication"
          },
          "503": {
            "description": "internal server error"
          }
        }
      }
    },
    "/services/": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "List of service objects\n",
        "tags": [
          "service"
        ],
        "summary": "searches service",
        "operationId": "serviceList",
        "responses": {
          "200": {
            "description": "search results matching criteria",
            "schema": {
              "$ref": "#/definitions/Services"
            }
          },
          "400": {
            "description": "bad input parameter"
          },
          "401": {
            "description": "bad authentication"
          },
          "403": {
            "description": "bad permissions"
          },
          "503": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Adds service object\n",
        "tags": [
          "service"
        ],
        "summary": "adds a service item",
        "operationId": "serviceAdd",
        "parameters": [
          {
            "description": "service item to add",
            "name": "serviceItem",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Service"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "item created",
            "schema": {
              "$ref": "#/definitions/Service"
            }
          },
          "400": {
            "description": "invalid input, object invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "bad authentication"
          },
          "403": {
            "description": "bad permissions"
          },
          "409": {
            "description": "item already exists"
          },
          "503": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/services/{ServiceID}/": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Receives full information about the service\n",
        "tags": [
          "service"
        ],
        "summary": "get service by ID",
        "operationId": "serviceGet",
        "parameters": [
          {
            "$ref": "#/parameters/ServiceID"
          }
        ],
        "responses": {
          "200": {
            "description": "search results matching criteria",
            "schema": {
              "$ref": "#/definitions/Service"
            }
          },
          "401": {
            "description": "bad authentication"
          },
          "403": {
            "description": "bad permissions"
          },
          "404": {
            "description": "item not found"
          },
          "503": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Edit service object\n",
        "tags": [
          "service"
        ],
        "summary": "edit a service item",
        "operationId": "serviceEdit",
        "parameters": [
          {
            "$ref": "#/parameters/ServiceID"
          },
          {
            "description": "service item to edit",
            "name": "serviceItem",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Service"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "item edited",
            "schema": {
              "$ref": "#/definitions/Service"
            }
          },
          "400": {
            "description": "invalid input, object invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "bad authentication"
          },
          "403": {
            "description": "bad permissions"
          },
          "404": {
            "description": "item not found"
          },
          "503": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Deletes a service object\n",
        "tags": [
          "service"
        ],
        "summary": "deletes a service item",
        "operationId": "serviceDelete",
        "parameters": [
          {
            "$ref": "#/parameters/ServiceID"
          }
        ],
        "responses": {
          "200": {
            "description": "item deleted"
          },
          "400": {
            "description": "invalid input, object invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "bad authentication"
          },
          "403": {
            "description": "bad permissions"
          },
          "404": {
            "description": "item not found"
          },
          "503": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/services/{ServiceID}/backup-config": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "service"
        ],
        "summary": "show backup config",
        "operationId": "backupConfigGet",
        "parameters": [
          {
            "$ref": "#/parameters/ServiceID"
          }
        ],
        "responses": {
          "200": {
            "description": "return backup config",
            "schema": {
              "$ref": "#/definitions/BackupConfig"
            }
          },
          "401": {
            "description": "bad authentication"
          },
          "403": {
            "description": "bad permissions"
          },
          "404": {
            "description": "item not found"
          },
          "503": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "service"
        ],
        "operationId": "backupConfigEdit",
        "parameters": [
          {
            "$ref": "#/parameters/ServiceID"
          },
          {
            "description": "BaseBackup credential item to edit",
            "name": "BackupConfig",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BackupConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "item is edited",
            "schema": {
              "$ref": "#/definitions/BackupConfig"
            }
          },
          "400": {
            "description": "invalid input, object invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "bad authentication"
          },
          "403": {
            "description": "bad permissions"
          },
          "404": {
            "description": "item not found"
          },
          "503": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "service"
        ],
        "operationId": "backupConfigCreate",
        "parameters": [
          {
            "$ref": "#/parameters/ServiceID"
          },
          {
            "description": "BaseBackup credential item to create",
            "name": "BackupConfig",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BackupConfig"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "item created",
            "schema": {
              "$ref": "#/definitions/BackupConfig"
            }
          },
          "400": {
            "description": "invalid input, object invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "bad authentication"
          },
          "403": {
            "description": "bad permissions"
          },
          "409": {
            "description": "item already exists"
          },
          "503": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "service"
        ],
        "operationId": "backupConfigDelete",
        "parameters": [
          {
            "$ref": "#/parameters/ServiceID"
          }
        ],
        "responses": {
          "200": {
            "description": "item is deleted"
          },
          "400": {
            "description": "invalid input, object invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "bad authentication"
          },
          "403": {
            "description": "bad permissions"
          },
          "404": {
            "description": "item not found"
          },
          "503": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/services/{ServiceID}/backups/": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "service"
        ],
        "operationId": "backupList",
        "parameters": [
          {
            "$ref": "#/parameters/ServiceID"
          }
        ],
        "responses": {
          "200": {
            "description": "search results matching criteria",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BaseBackup"
              }
            }
          },
          "400": {
            "description": "invalid input, object invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "bad authentication"
          },
          "403": {
            "description": "bad permissions"
          },
          "404": {
            "description": "item not found"
          },
          "503": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/services/{ServiceID}/databases/": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "service"
        ],
        "operationId": "databaseList",
        "parameters": [
          {
            "$ref": "#/parameters/ServiceID"
          }
        ],
        "responses": {
          "200": {
            "description": "search results matching criteria",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Database"
              }
            }
          },
          "400": {
            "description": "invalid input, object invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "bad authentication"
          },
          "403": {
            "description": "bad permissions"
          },
          "503": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "service"
        ],
        "operationId": "databaseCreate",
        "parameters": [
          {
            "$ref": "#/parameters/ServiceID"
          },
          {
            "description": "item to create",
            "name": "database",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Database"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "item is created"
          },
          "400": {
            "description": "invalid input, object invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "bad authentication"
          },
          "403": {
            "description": "bad permissions"
          },
          "404": {
            "description": "item not found"
          },
          "409": {
            "description": "item already exists"
          },
          "503": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/services/{ServiceID}/databases/{Database}/": {
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "service"
        ],
        "operationId": "databaseDelete",
        "parameters": [
          {
            "$ref": "#/parameters/ServiceID"
          },
          {
            "type": "string",
            "description": "item to delete",
            "name": "Database",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "item is deleted"
          },
          "400": {
            "description": "invalid input, object invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "bad authentication"
          },
          "403": {
            "description": "bad permissions"
          },
          "404": {
            "description": "item not found"
          },
          "503": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/services/{ServiceID}/logs": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "service"
        ],
        "operationId": "logsGet",
        "parameters": [
          {
            "$ref": "#/parameters/ServiceID"
          },
          {
            "pattern": "^\\S+$",
            "type": "string",
            "description": "ServiceInstance to get logs of",
            "name": "service_instance",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "default": 100,
            "description": "number of lines to tail",
            "name": "tail",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "service node logs",
            "schema": {
              "$ref": "#/definitions/Log"
            }
          },
          "401": {
            "description": "bad authentication"
          },
          "403": {
            "description": "bad permissions"
          },
          "503": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/services/{ServiceID}/restore": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "service"
        ],
        "operationId": "databaseRestore",
        "parameters": [
          {
            "$ref": "#/parameters/ServiceID"
          },
          {
            "description": "items to restore",
            "name": "restoreItem",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "key",
                "database"
              ],
              "properties": {
                "database": {
                  "type": "string"
                },
                "key": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "item is restored"
          },
          "400": {
            "description": "invalid input, object invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "bad authentication"
          },
          "403": {
            "description": "bad permissions"
          },
          "404": {
            "description": "item not found"
          },
          "503": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/services/{ServiceID}/users/": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "service"
        ],
        "operationId": "userList",
        "parameters": [
          {
            "$ref": "#/parameters/ServiceID"
          }
        ],
        "responses": {
          "200": {
            "description": "search results matching criteria",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "400": {
            "description": "invalid input, object invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "bad authentication"
          },
          "403": {
            "description": "bad permissions"
          },
          "503": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "service"
        ],
        "operationId": "userCreate",
        "parameters": [
          {
            "$ref": "#/parameters/ServiceID"
          },
          {
            "description": "item to create",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "item is created"
          },
          "400": {
            "description": "invalid input, object invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "bad authentication"
          },
          "403": {
            "description": "bad permissions"
          },
          "503": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/services/{ServiceID}/users/{Username}/": {
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "service"
        ],
        "operationId": "userEdit",
        "parameters": [
          {
            "$ref": "#/parameters/ServiceID"
          },
          {
            "type": "string",
            "description": "username to edit",
            "name": "Username",
            "in": "path",
            "required": true
          },
          {
            "description": "item to edit",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "item is edited"
          },
          "400": {
            "description": "invalid input, object invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "bad authentication"
          },
          "403": {
            "description": "bad permissions"
          },
          "409": {
            "description": "item already exists"
          },
          "503": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "service"
        ],
        "operationId": "userDelete",
        "parameters": [
          {
            "$ref": "#/parameters/ServiceID"
          },
          {
            "type": "string",
            "description": "username to edit",
            "name": "Username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "item is deleted"
          },
          "400": {
            "description": "invalid input, object invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "bad authentication"
          },
          "403": {
            "description": "bad permissions"
          },
          "409": {
            "description": "item already exists"
          },
          "503": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AccessTokenResponse": {
      "properties": {
        "access_token": {
          "type": "string"
        },
        "expires_in": {
          "type": "integer"
        },
        "refresh_token": {
          "type": "string"
        },
        "token_type": {
          "type": "string"
        }
      }
    },
    "AdvancedConf": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "BaseBackup": {
      "type": "object",
      "required": [
        "key",
        "size",
        "lastModified"
      ],
      "properties": {
        "key": {
          "type": "string"
        },
        "lastModified": {
          "type": "string",
          "format": "date-time"
        },
        "size": {
          "type": "integer"
        }
      }
    },
    "BackupConfig": {
      "type": "object",
      "required": [
        "enabled",
        "aws_access_key_id",
        "aws_secret_access_key",
        "bucket",
        "endpoint"
      ],
      "properties": {
        "aws_access_key_id": {
          "type": "string"
        },
        "aws_secret_access_key": {
          "type": "string"
        },
        "bucket": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "endpoint": {
          "type": "string"
        },
        "schedule": {
          "type": "string"
        }
      }
    },
    "Connection": {
      "type": "object",
      "properties": {
        "cert": {
          "type": "string"
        },
        "host": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "port": {
          "type": "integer"
        },
        "ssl_mode": {
          "type": "string"
        },
        "user": {
          "type": "string"
        }
      }
    },
    "Database": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "Limits": {
      "type": "object",
      "required": [
        "cpu",
        "memory",
        "volumeSize"
      ],
      "properties": {
        "cpu": {
          "type": "string"
        },
        "memory": {
          "type": "string",
          "pattern": "^([+-]?[0-9.]+)([eEinumkKMGTP]*[-+]?[0-9]*)$"
        },
        "volumeSize": {
          "type": "string",
          "pattern": "^([+-]?[0-9.]+)([eEinumkKMGTP]*[-+]?[0-9]*)$"
        }
      }
    },
    "Log": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string"
        },
        "lines": {
          "type": "integer"
        }
      }
    },
    "MaintenanceWindow": {
      "type": "object",
      "required": [
        "day",
        "startHour"
      ],
      "properties": {
        "day": {
          "type": "string",
          "enum": [
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday",
            "Sunday"
          ]
        },
        "startHour": {
          "type": "integer",
          "maximum": 11
        }
      }
    },
    "Principal": {
      "properties": {
        "token": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "Service": {
      "type": "object",
      "required": [
        "name",
        "ns",
        "type"
      ],
      "properties": {
        "advancedConf": {
          "$ref": "#/definitions/AdvancedConf"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "externalConnection": {
          "type": "object",
          "properties": {
            "master": {
              "$ref": "#/definitions/Connection"
            },
            "replica": {
              "$ref": "#/definitions/Connection"
            }
          },
          "readOnly": true
        },
        "instances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceInstance"
          },
          "readOnly": true
        },
        "internalConnection": {
          "type": "object",
          "properties": {
            "master": {
              "$ref": "#/definitions/Connection"
            },
            "replica": {
              "$ref": "#/definitions/Connection"
            }
          },
          "readOnly": true
        },
        "limits": {
          "$ref": "#/definitions/Limits"
        },
        "maintenanceWindow": {
          "$ref": "#/definitions/MaintenanceWindow"
        },
        "masters": {
          "type": "integer",
          "readOnly": true
        },
        "name": {
          "type": "string"
        },
        "ns": {
          "type": "string"
        },
        "replicas": {
          "type": "integer",
          "x-nullable": true
        },
        "status": {
          "type": "string",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "enum": [
            "postgresql",
            "mysql"
          ]
        }
      }
    },
    "ServiceInstance": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "role": {
          "type": "string"
        },
        "status": {
          "type": "object",
          "$ref": "#/definitions/ServiceInstanceStatus"
        }
      }
    },
    "ServiceInstanceStatus": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": [
            "Running",
            "Failed",
            "Pending"
          ]
        }
      }
    },
    "Services": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Service"
      }
    },
    "User": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "UserCredentials": {
      "required": [
        "username",
        "password"
      ],
      "properties": {
        "password": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    }
  },
  "parameters": {
    "ServiceID": {
      "pattern": "[a-z0-9]([-a-z0-9]*[a-z0-9])?:[a-z0-9]([-a-z0-9]*[a-z0-9])?",
      "type": "string",
      "description": "service Resource ID",
      "name": "ServiceID",
      "in": "path",
      "required": true
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "tags": [
    {
      "description": "Everything about service resource",
      "name": "service"
    },
    {
      "description": "Everything about authentication/authorization",
      "name": "auth"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https",
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is a service API",
    "title": "service API",
    "contact": {
      "email": "infra@cloudlinux.com"
    },
    "version": "1.0.0"
  },
  "host": "localhost:8001",
  "basePath": "/api/v1/",
  "paths": {
    "/login": {
      "post": {
        "description": "Login user and return access credentials\n",
        "tags": [
          "auth"
        ],
        "summary": "login user",
        "operationId": "loginUser",
        "parameters": [
          {
            "description": "user credentials",
            "name": "userCredentials",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/UserCredentials"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "access token response",
            "schema": {
              "$ref": "#/definitions/AccessTokenResponse"
            }
          },
          "400": {
            "description": "bad input parameters"
          },
          "401": {
            "description": "bad authentication"
          },
          "503": {
            "description": "internal server error"
          }
        }
      }
    },
    "/services/": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "List of service objects\n",
        "tags": [
          "service"
        ],
        "summary": "searches service",
        "operationId": "serviceList",
        "responses": {
          "200": {
            "description": "search results matching criteria",
            "schema": {
              "$ref": "#/definitions/Services"
            }
          },
          "400": {
            "description": "bad input parameter"
          },
          "401": {
            "description": "bad authentication"
          },
          "403": {
            "description": "bad permissions"
          },
          "503": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Adds service object\n",
        "tags": [
          "service"
        ],
        "summary": "adds a service item",
        "operationId": "serviceAdd",
        "parameters": [
          {
            "description": "service item to add",
            "name": "serviceItem",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Service"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "item created",
            "schema": {
              "$ref": "#/definitions/Service"
            }
          },
          "400": {
            "description": "invalid input, object invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "bad authentication"
          },
          "403": {
            "description": "bad permissions"
          },
          "409": {
            "description": "item already exists"
          },
          "503": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/services/{ServiceID}/": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Receives full information about the service\n",
        "tags": [
          "service"
        ],
        "summary": "get service by ID",
        "operationId": "serviceGet",
        "parameters": [
          {
            "pattern": "[a-z0-9]([-a-z0-9]*[a-z0-9])?:[a-z0-9]([-a-z0-9]*[a-z0-9])?",
            "type": "string",
            "description": "service Resource ID",
            "name": "ServiceID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "search results matching criteria",
            "schema": {
              "$ref": "#/definitions/Service"
            }
          },
          "401": {
            "description": "bad authentication"
          },
          "403": {
            "description": "bad permissions"
          },
          "404": {
            "description": "item not found"
          },
          "503": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Edit service object\n",
        "tags": [
          "service"
        ],
        "summary": "edit a service item",
        "operationId": "serviceEdit",
        "parameters": [
          {
            "pattern": "[a-z0-9]([-a-z0-9]*[a-z0-9])?:[a-z0-9]([-a-z0-9]*[a-z0-9])?",
            "type": "string",
            "description": "service Resource ID",
            "name": "ServiceID",
            "in": "path",
            "required": true
          },
          {
            "description": "service item to edit",
            "name": "serviceItem",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Service"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "item edited",
            "schema": {
              "$ref": "#/definitions/Service"
            }
          },
          "400": {
            "description": "invalid input, object invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "bad authentication"
          },
          "403": {
            "description": "bad permissions"
          },
          "404": {
            "description": "item not found"
          },
          "503": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "description": "Deletes a service object\n",
        "tags": [
          "service"
        ],
        "summary": "deletes a service item",
        "operationId": "serviceDelete",
        "parameters": [
          {
            "pattern": "[a-z0-9]([-a-z0-9]*[a-z0-9])?:[a-z0-9]([-a-z0-9]*[a-z0-9])?",
            "type": "string",
            "description": "service Resource ID",
            "name": "ServiceID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "item deleted"
          },
          "400": {
            "description": "invalid input, object invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "bad authentication"
          },
          "403": {
            "description": "bad permissions"
          },
          "404": {
            "description": "item not found"
          },
          "503": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/services/{ServiceID}/backup-config": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "service"
        ],
        "summary": "show backup config",
        "operationId": "backupConfigGet",
        "parameters": [
          {
            "pattern": "[a-z0-9]([-a-z0-9]*[a-z0-9])?:[a-z0-9]([-a-z0-9]*[a-z0-9])?",
            "type": "string",
            "description": "service Resource ID",
            "name": "ServiceID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "return backup config",
            "schema": {
              "$ref": "#/definitions/BackupConfig"
            }
          },
          "401": {
            "description": "bad authentication"
          },
          "403": {
            "description": "bad permissions"
          },
          "404": {
            "description": "item not found"
          },
          "503": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "service"
        ],
        "operationId": "backupConfigEdit",
        "parameters": [
          {
            "pattern": "[a-z0-9]([-a-z0-9]*[a-z0-9])?:[a-z0-9]([-a-z0-9]*[a-z0-9])?",
            "type": "string",
            "description": "service Resource ID",
            "name": "ServiceID",
            "in": "path",
            "required": true
          },
          {
            "description": "BaseBackup credential item to edit",
            "name": "BackupConfig",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BackupConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "item is edited",
            "schema": {
              "$ref": "#/definitions/BackupConfig"
            }
          },
          "400": {
            "description": "invalid input, object invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "bad authentication"
          },
          "403": {
            "description": "bad permissions"
          },
          "404": {
            "description": "item not found"
          },
          "503": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "service"
        ],
        "operationId": "backupConfigCreate",
        "parameters": [
          {
            "pattern": "[a-z0-9]([-a-z0-9]*[a-z0-9])?:[a-z0-9]([-a-z0-9]*[a-z0-9])?",
            "type": "string",
            "description": "service Resource ID",
            "name": "ServiceID",
            "in": "path",
            "required": true
          },
          {
            "description": "BaseBackup credential item to create",
            "name": "BackupConfig",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BackupConfig"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "item created",
            "schema": {
              "$ref": "#/definitions/BackupConfig"
            }
          },
          "400": {
            "description": "invalid input, object invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "bad authentication"
          },
          "403": {
            "description": "bad permissions"
          },
          "409": {
            "description": "item already exists"
          },
          "503": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "service"
        ],
        "operationId": "backupConfigDelete",
        "parameters": [
          {
            "pattern": "[a-z0-9]([-a-z0-9]*[a-z0-9])?:[a-z0-9]([-a-z0-9]*[a-z0-9])?",
            "type": "string",
            "description": "service Resource ID",
            "name": "ServiceID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "item is deleted"
          },
          "400": {
            "description": "invalid input, object invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "bad authentication"
          },
          "403": {
            "description": "bad permissions"
          },
          "404": {
            "description": "item not found"
          },
          "503": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/services/{ServiceID}/backups/": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "service"
        ],
        "operationId": "backupList",
        "parameters": [
          {
            "pattern": "[a-z0-9]([-a-z0-9]*[a-z0-9])?:[a-z0-9]([-a-z0-9]*[a-z0-9])?",
            "type": "string",
            "description": "service Resource ID",
            "name": "ServiceID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "search results matching criteria",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BaseBackup"
              }
            }
          },
          "400": {
            "description": "invalid input, object invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "bad authentication"
          },
          "403": {
            "description": "bad permissions"
          },
          "404": {
            "description": "item not found"
          },
          "503": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/services/{ServiceID}/databases/": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "service"
        ],
        "operationId": "databaseList",
        "parameters": [
          {
            "pattern": "[a-z0-9]([-a-z0-9]*[a-z0-9])?:[a-z0-9]([-a-z0-9]*[a-z0-9])?",
            "type": "string",
            "description": "service Resource ID",
            "name": "ServiceID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "search results matching criteria",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Database"
              }
            }
          },
          "400": {
            "description": "invalid input, object invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "bad authentication"
          },
          "403": {
            "description": "bad permissions"
          },
          "503": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "service"
        ],
        "operationId": "databaseCreate",
        "parameters": [
          {
            "pattern": "[a-z0-9]([-a-z0-9]*[a-z0-9])?:[a-z0-9]([-a-z0-9]*[a-z0-9])?",
            "type": "string",
            "description": "service Resource ID",
            "name": "ServiceID",
            "in": "path",
            "required": true
          },
          {
            "description": "item to create",
            "name": "database",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Database"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "item is created"
          },
          "400": {
            "description": "invalid input, object invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "bad authentication"
          },
          "403": {
            "description": "bad permissions"
          },
          "404": {
            "description": "item not found"
          },
          "409": {
            "description": "item already exists"
          },
          "503": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/services/{ServiceID}/databases/{Database}/": {
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "service"
        ],
        "operationId": "databaseDelete",
        "parameters": [
          {
            "pattern": "[a-z0-9]([-a-z0-9]*[a-z0-9])?:[a-z0-9]([-a-z0-9]*[a-z0-9])?",
            "type": "string",
            "description": "service Resource ID",
            "name": "ServiceID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "item to delete",
            "name": "Database",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "item is deleted"
          },
          "400": {
            "description": "invalid input, object invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "bad authentication"
          },
          "403": {
            "description": "bad permissions"
          },
          "404": {
            "description": "item not found"
          },
          "503": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/services/{ServiceID}/logs": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "service"
        ],
        "operationId": "logsGet",
        "parameters": [
          {
            "pattern": "[a-z0-9]([-a-z0-9]*[a-z0-9])?:[a-z0-9]([-a-z0-9]*[a-z0-9])?",
            "type": "string",
            "description": "service Resource ID",
            "name": "ServiceID",
            "in": "path",
            "required": true
          },
          {
            "pattern": "^\\S+$",
            "type": "string",
            "description": "ServiceInstance to get logs of",
            "name": "service_instance",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "default": 100,
            "description": "number of lines to tail",
            "name": "tail",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "service node logs",
            "schema": {
              "$ref": "#/definitions/Log"
            }
          },
          "401": {
            "description": "bad authentication"
          },
          "403": {
            "description": "bad permissions"
          },
          "503": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/services/{ServiceID}/restore": {
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "service"
        ],
        "operationId": "databaseRestore",
        "parameters": [
          {
            "pattern": "[a-z0-9]([-a-z0-9]*[a-z0-9])?:[a-z0-9]([-a-z0-9]*[a-z0-9])?",
            "type": "string",
            "description": "service Resource ID",
            "name": "ServiceID",
            "in": "path",
            "required": true
          },
          {
            "description": "items to restore",
            "name": "restoreItem",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "key",
                "database"
              ],
              "properties": {
                "database": {
                  "type": "string"
                },
                "key": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "item is restored"
          },
          "400": {
            "description": "invalid input, object invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "bad authentication"
          },
          "403": {
            "description": "bad permissions"
          },
          "404": {
            "description": "item not found"
          },
          "503": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/services/{ServiceID}/users/": {
      "get": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "service"
        ],
        "operationId": "userList",
        "parameters": [
          {
            "pattern": "[a-z0-9]([-a-z0-9]*[a-z0-9])?:[a-z0-9]([-a-z0-9]*[a-z0-9])?",
            "type": "string",
            "description": "service Resource ID",
            "name": "ServiceID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "search results matching criteria",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          },
          "400": {
            "description": "invalid input, object invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "bad authentication"
          },
          "403": {
            "description": "bad permissions"
          },
          "503": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "service"
        ],
        "operationId": "userCreate",
        "parameters": [
          {
            "pattern": "[a-z0-9]([-a-z0-9]*[a-z0-9])?:[a-z0-9]([-a-z0-9]*[a-z0-9])?",
            "type": "string",
            "description": "service Resource ID",
            "name": "ServiceID",
            "in": "path",
            "required": true
          },
          {
            "description": "item to create",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "item is created"
          },
          "400": {
            "description": "invalid input, object invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "bad authentication"
          },
          "403": {
            "description": "bad permissions"
          },
          "503": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/services/{ServiceID}/users/{Username}/": {
      "put": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "service"
        ],
        "operationId": "userEdit",
        "parameters": [
          {
            "pattern": "[a-z0-9]([-a-z0-9]*[a-z0-9])?:[a-z0-9]([-a-z0-9]*[a-z0-9])?",
            "type": "string",
            "description": "service Resource ID",
            "name": "ServiceID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "username to edit",
            "name": "Username",
            "in": "path",
            "required": true
          },
          {
            "description": "item to edit",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "item is edited"
          },
          "400": {
            "description": "invalid input, object invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "bad authentication"
          },
          "403": {
            "description": "bad permissions"
          },
          "409": {
            "description": "item already exists"
          },
          "503": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "Bearer": []
          }
        ],
        "tags": [
          "service"
        ],
        "operationId": "userDelete",
        "parameters": [
          {
            "pattern": "[a-z0-9]([-a-z0-9]*[a-z0-9])?:[a-z0-9]([-a-z0-9]*[a-z0-9])?",
            "type": "string",
            "description": "service Resource ID",
            "name": "ServiceID",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "username to edit",
            "name": "Username",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "item is deleted"
          },
          "400": {
            "description": "invalid input, object invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "bad authentication"
          },
          "403": {
            "description": "bad permissions"
          },
          "409": {
            "description": "item already exists"
          },
          "503": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AccessTokenResponse": {
      "properties": {
        "access_token": {
          "type": "string"
        },
        "expires_in": {
          "type": "integer"
        },
        "refresh_token": {
          "type": "string"
        },
        "token_type": {
          "type": "string"
        }
      }
    },
    "AdvancedConf": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "BaseBackup": {
      "type": "object",
      "required": [
        "key",
        "size",
        "lastModified"
      ],
      "properties": {
        "key": {
          "type": "string"
        },
        "lastModified": {
          "type": "string",
          "format": "date-time"
        },
        "size": {
          "type": "integer"
        }
      }
    },
    "BackupConfig": {
      "type": "object",
      "required": [
        "enabled",
        "aws_access_key_id",
        "aws_secret_access_key",
        "bucket",
        "endpoint"
      ],
      "properties": {
        "aws_access_key_id": {
          "type": "string"
        },
        "aws_secret_access_key": {
          "type": "string"
        },
        "bucket": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "endpoint": {
          "type": "string"
        },
        "schedule": {
          "type": "string"
        }
      }
    },
    "Connection": {
      "type": "object",
      "properties": {
        "cert": {
          "type": "string"
        },
        "host": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "port": {
          "type": "integer"
        },
        "ssl_mode": {
          "type": "string"
        },
        "user": {
          "type": "string"
        }
      }
    },
    "Database": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "Limits": {
      "type": "object",
      "required": [
        "cpu",
        "memory",
        "volumeSize"
      ],
      "properties": {
        "cpu": {
          "type": "string"
        },
        "memory": {
          "type": "string",
          "pattern": "^([+-]?[0-9.]+)([eEinumkKMGTP]*[-+]?[0-9]*)$"
        },
        "volumeSize": {
          "type": "string",
          "pattern": "^([+-]?[0-9.]+)([eEinumkKMGTP]*[-+]?[0-9]*)$"
        }
      }
    },
    "Log": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string"
        },
        "lines": {
          "type": "integer"
        }
      }
    },
    "MaintenanceWindow": {
      "type": "object",
      "required": [
        "day",
        "startHour"
      ],
      "properties": {
        "day": {
          "type": "string",
          "enum": [
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday",
            "Sunday"
          ]
        },
        "startHour": {
          "type": "integer",
          "maximum": 11,
          "minimum": 0
        }
      }
    },
    "Principal": {
      "properties": {
        "token": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "Service": {
      "type": "object",
      "required": [
        "name",
        "ns",
        "type"
      ],
      "properties": {
        "advancedConf": {
          "$ref": "#/definitions/AdvancedConf"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "externalConnection": {
          "type": "object",
          "properties": {
            "master": {
              "$ref": "#/definitions/Connection"
            },
            "replica": {
              "$ref": "#/definitions/Connection"
            }
          },
          "readOnly": true
        },
        "instances": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ServiceInstance"
          },
          "readOnly": true
        },
        "internalConnection": {
          "type": "object",
          "properties": {
            "master": {
              "$ref": "#/definitions/Connection"
            },
            "replica": {
              "$ref": "#/definitions/Connection"
            }
          },
          "readOnly": true
        },
        "limits": {
          "$ref": "#/definitions/Limits"
        },
        "maintenanceWindow": {
          "$ref": "#/definitions/MaintenanceWindow"
        },
        "masters": {
          "type": "integer",
          "readOnly": true
        },
        "name": {
          "type": "string"
        },
        "ns": {
          "type": "string"
        },
        "replicas": {
          "type": "integer",
          "x-nullable": true
        },
        "status": {
          "type": "string",
          "readOnly": true
        },
        "type": {
          "type": "string",
          "enum": [
            "postgresql",
            "mysql"
          ]
        }
      }
    },
    "ServiceExternalConnection": {
      "type": "object",
      "properties": {
        "master": {
          "$ref": "#/definitions/Connection"
        },
        "replica": {
          "$ref": "#/definitions/Connection"
        }
      },
      "readOnly": true
    },
    "ServiceInstance": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "role": {
          "type": "string"
        },
        "status": {
          "type": "object",
          "$ref": "#/definitions/ServiceInstanceStatus"
        }
      }
    },
    "ServiceInstanceStatus": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "enum": [
            "Running",
            "Failed",
            "Pending"
          ]
        }
      }
    },
    "ServiceInternalConnection": {
      "type": "object",
      "properties": {
        "master": {
          "$ref": "#/definitions/Connection"
        },
        "replica": {
          "$ref": "#/definitions/Connection"
        }
      },
      "readOnly": true
    },
    "Services": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Service"
      }
    },
    "User": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "UserCredentials": {
      "required": [
        "username",
        "password"
      ],
      "properties": {
        "password": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    }
  },
  "parameters": {
    "ServiceID": {
      "pattern": "[a-z0-9]([-a-z0-9]*[a-z0-9])?:[a-z0-9]([-a-z0-9]*[a-z0-9])?",
      "type": "string",
      "description": "service Resource ID",
      "name": "ServiceID",
      "in": "path",
      "required": true
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "tags": [
    {
      "description": "Everything about service resource",
      "name": "service"
    },
    {
      "description": "Everything about authentication/authorization",
      "name": "auth"
    }
  ]
}`))
}
