// Code generated by go-swagger; DO NOT EDIT.

package logs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewLogListParams creates a new LogListParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewLogListParams() *LogListParams {
	return &LogListParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewLogListParamsWithTimeout creates a new LogListParams object
// with the ability to set a timeout on a request.
func NewLogListParamsWithTimeout(timeout time.Duration) *LogListParams {
	return &LogListParams{
		timeout: timeout,
	}
}

// NewLogListParamsWithContext creates a new LogListParams object
// with the ability to set a context for a request.
func NewLogListParamsWithContext(ctx context.Context) *LogListParams {
	return &LogListParams{
		Context: ctx,
	}
}

// NewLogListParamsWithHTTPClient creates a new LogListParams object
// with the ability to set a custom HTTPClient for a request.
func NewLogListParamsWithHTTPClient(client *http.Client) *LogListParams {
	return &LogListParams{
		HTTPClient: client,
	}
}

/* LogListParams contains all the parameters to send to the API endpoint
   for the log list operation.

   Typically these are written to a http.Request.
*/
type LogListParams struct {

	/* ContainerName.

	   kuberlogic pod container name to query logs by
	*/
	ContainerName *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the log list params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *LogListParams) WithDefaults() *LogListParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the log list params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *LogListParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the log list params
func (o *LogListParams) WithTimeout(timeout time.Duration) *LogListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the log list params
func (o *LogListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the log list params
func (o *LogListParams) WithContext(ctx context.Context) *LogListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the log list params
func (o *LogListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the log list params
func (o *LogListParams) WithHTTPClient(client *http.Client) *LogListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the log list params
func (o *LogListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithContainerName adds the containerName to the log list params
func (o *LogListParams) WithContainerName(containerName *string) *LogListParams {
	o.SetContainerName(containerName)
	return o
}

// SetContainerName adds the containerName to the log list params
func (o *LogListParams) SetContainerName(containerName *string) {
	o.ContainerName = containerName
}

// WriteToRequest writes these params to a swagger request
func (o *LogListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ContainerName != nil {

		// query param ContainerName
		var qrContainerName string

		if o.ContainerName != nil {
			qrContainerName = *o.ContainerName
		}
		qContainerName := qrContainerName
		if qContainerName != "" {

			if err := r.SetQueryParam("ContainerName", qContainerName); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
