// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is a service API",
    "title": "service API",
    "contact": {
      "email": "info@kuberlogic.com"
    },
    "version": "0.0.1"
  },
  "host": "localhost:8001",
  "basePath": "/api/v1/",
  "paths": {
    "/services/": {
      "get": {
        "description": "List of service objects\n",
        "tags": [
          "service"
        ],
        "summary": "searches service",
        "operationId": "serviceList",
        "responses": {
          "200": {
            "description": "search results matching criteria",
            "schema": {
              "$ref": "#/definitions/Services"
            }
          },
          "400": {
            "description": "bad input parameter",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "bad authentication"
          },
          "403": {
            "description": "bad permissions"
          },
          "503": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "description": "Adds service object\n",
        "tags": [
          "service"
        ],
        "summary": "adds a service item",
        "operationId": "serviceAdd",
        "parameters": [
          {
            "$ref": "#/parameters/ServiceItem"
          }
        ],
        "responses": {
          "201": {
            "description": "item created",
            "schema": {
              "$ref": "#/definitions/Service"
            }
          },
          "400": {
            "description": "invalid input, object invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "bad authentication"
          },
          "403": {
            "description": "bad permissions"
          },
          "409": {
            "description": "item already exists"
          },
          "503": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/services/{ServiceID}/": {
      "delete": {
        "description": "Deletes a service object\n",
        "tags": [
          "service"
        ],
        "summary": "deletes a service item",
        "operationId": "serviceDelete",
        "parameters": [
          {
            "$ref": "#/parameters/ServiceID"
          }
        ],
        "responses": {
          "200": {
            "description": "item deleted"
          },
          "400": {
            "description": "invalid input, object invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "bad authentication"
          },
          "403": {
            "description": "bad permissions"
          },
          "404": {
            "description": "item not found"
          },
          "503": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Advanced": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "Resource": {
      "type": "object",
      "required": [
        "cpu",
        "memory",
        "volumeSize"
      ],
      "properties": {
        "cpu": {
          "type": "string",
          "pattern": "^([0-9]+$)|([0-9]+.[0-9]+$)"
        },
        "memory": {
          "type": "string",
          "pattern": "^([0-9]+$)|([0-9]+.[0-9]+$)"
        },
        "volumeSize": {
          "type": "string",
          "pattern": "^([0-9]+$)|([0-9]+.[0-9]+$)"
        }
      }
    },
    "Service": {
      "type": "object",
      "required": [
        "name",
        "type"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/Advanced"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "maxLength": 20,
          "minLength": 2,
          "pattern": "[a-z0-9]([-a-z0-9]*[a-z0-9])?"
        },
        "ns": {
          "type": "string",
          "maxLength": 33,
          "minLength": 2,
          "pattern": "[a-z0-9]([-a-z0-9]*[a-z0-9])?"
        },
        "replicas": {
          "type": "integer",
          "x-nullable": true
        },
        "resources": {
          "type": "object",
          "properties": {
            "limits": {
              "$ref": "#/definitions/Resource"
            },
            "requests": {
              "$ref": "#/definitions/Resource"
            }
          }
        },
        "status": {
          "type": "string",
          "readOnly": true
        },
        "type": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "volumeSize": {
          "type": "string"
        }
      }
    },
    "Services": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Service"
      }
    }
  },
  "parameters": {
    "ServiceID": {
      "maxLength": 120,
      "minLength": 3,
      "pattern": "[a-z0-9]([-a-z0-9]*[a-z0-9])?:[a-z0-9]([-a-z0-9]*[a-z0-9])?",
      "type": "string",
      "description": "service Resource ID",
      "name": "ServiceID",
      "in": "path",
      "required": true
    },
    "ServiceItem": {
      "description": "service item",
      "name": "serviceItem",
      "in": "body",
      "required": true,
      "schema": {
        "$ref": "#/definitions/Service"
      }
    }
  },
  "tags": [
    {
      "description": "Everything about service resource",
      "name": "service"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This is a service API",
    "title": "service API",
    "contact": {
      "email": "info@kuberlogic.com"
    },
    "version": "0.0.1"
  },
  "host": "localhost:8001",
  "basePath": "/api/v1/",
  "paths": {
    "/services/": {
      "get": {
        "description": "List of service objects\n",
        "tags": [
          "service"
        ],
        "summary": "searches service",
        "operationId": "serviceList",
        "responses": {
          "200": {
            "description": "search results matching criteria",
            "schema": {
              "$ref": "#/definitions/Services"
            }
          },
          "400": {
            "description": "bad input parameter",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "bad authentication"
          },
          "403": {
            "description": "bad permissions"
          },
          "503": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "description": "Adds service object\n",
        "tags": [
          "service"
        ],
        "summary": "adds a service item",
        "operationId": "serviceAdd",
        "parameters": [
          {
            "description": "service item",
            "name": "serviceItem",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Service"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "item created",
            "schema": {
              "$ref": "#/definitions/Service"
            }
          },
          "400": {
            "description": "invalid input, object invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "bad authentication"
          },
          "403": {
            "description": "bad permissions"
          },
          "409": {
            "description": "item already exists"
          },
          "503": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/services/{ServiceID}/": {
      "delete": {
        "description": "Deletes a service object\n",
        "tags": [
          "service"
        ],
        "summary": "deletes a service item",
        "operationId": "serviceDelete",
        "parameters": [
          {
            "maxLength": 120,
            "minLength": 3,
            "pattern": "[a-z0-9]([-a-z0-9]*[a-z0-9])?:[a-z0-9]([-a-z0-9]*[a-z0-9])?",
            "type": "string",
            "description": "service Resource ID",
            "name": "ServiceID",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "item deleted"
          },
          "400": {
            "description": "invalid input, object invalid",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "bad authentication"
          },
          "403": {
            "description": "bad permissions"
          },
          "404": {
            "description": "item not found"
          },
          "503": {
            "description": "internal server error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Advanced": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "Resource": {
      "type": "object",
      "required": [
        "cpu",
        "memory",
        "volumeSize"
      ],
      "properties": {
        "cpu": {
          "type": "string",
          "pattern": "^([0-9]+$)|([0-9]+.[0-9]+$)"
        },
        "memory": {
          "type": "string",
          "pattern": "^([0-9]+$)|([0-9]+.[0-9]+$)"
        },
        "volumeSize": {
          "type": "string",
          "pattern": "^([0-9]+$)|([0-9]+.[0-9]+$)"
        }
      }
    },
    "Service": {
      "type": "object",
      "required": [
        "name",
        "type"
      ],
      "properties": {
        "advanced": {
          "$ref": "#/definitions/Advanced"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "maxLength": 20,
          "minLength": 2,
          "pattern": "[a-z0-9]([-a-z0-9]*[a-z0-9])?"
        },
        "ns": {
          "type": "string",
          "maxLength": 33,
          "minLength": 2,
          "pattern": "[a-z0-9]([-a-z0-9]*[a-z0-9])?"
        },
        "replicas": {
          "type": "integer",
          "x-nullable": true
        },
        "resources": {
          "type": "object",
          "properties": {
            "limits": {
              "$ref": "#/definitions/Resource"
            },
            "requests": {
              "$ref": "#/definitions/Resource"
            }
          }
        },
        "status": {
          "type": "string",
          "readOnly": true
        },
        "type": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "volumeSize": {
          "type": "string"
        }
      }
    },
    "ServiceResources": {
      "type": "object",
      "properties": {
        "limits": {
          "$ref": "#/definitions/Resource"
        },
        "requests": {
          "$ref": "#/definitions/Resource"
        }
      }
    },
    "Services": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/Service"
      }
    }
  },
  "parameters": {
    "ServiceID": {
      "maxLength": 120,
      "minLength": 3,
      "pattern": "[a-z0-9]([-a-z0-9]*[a-z0-9])?:[a-z0-9]([-a-z0-9]*[a-z0-9])?",
      "type": "string",
      "description": "service Resource ID",
      "name": "ServiceID",
      "in": "path",
      "required": true
    },
    "ServiceItem": {
      "description": "service item",
      "name": "serviceItem",
      "in": "body",
      "required": true,
      "schema": {
        "$ref": "#/definitions/Service"
      }
    }
  },
  "tags": [
    {
      "description": "Everything about service resource",
      "name": "service"
    }
  ]
}`))
}
