// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MaintenanceWindow maintenance window
//
// swagger:model MaintenanceWindow
type MaintenanceWindow struct {

	// day
	// Required: true
	// Enum: [Monday Tuesday Wednesday Thursday Friday Saturday Sunday]
	Day *string `json:"day"`

	// start hour
	// Required: true
	// Maximum: 11
	// Minimum: 0
	StartHour *int64 `json:"startHour"`
}

// Validate validates this maintenance window
func (m *MaintenanceWindow) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartHour(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var maintenanceWindowTypeDayPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		maintenanceWindowTypeDayPropEnum = append(maintenanceWindowTypeDayPropEnum, v)
	}
}

const (

	// MaintenanceWindowDayMonday captures enum value "Monday"
	MaintenanceWindowDayMonday string = "Monday"

	// MaintenanceWindowDayTuesday captures enum value "Tuesday"
	MaintenanceWindowDayTuesday string = "Tuesday"

	// MaintenanceWindowDayWednesday captures enum value "Wednesday"
	MaintenanceWindowDayWednesday string = "Wednesday"

	// MaintenanceWindowDayThursday captures enum value "Thursday"
	MaintenanceWindowDayThursday string = "Thursday"

	// MaintenanceWindowDayFriday captures enum value "Friday"
	MaintenanceWindowDayFriday string = "Friday"

	// MaintenanceWindowDaySaturday captures enum value "Saturday"
	MaintenanceWindowDaySaturday string = "Saturday"

	// MaintenanceWindowDaySunday captures enum value "Sunday"
	MaintenanceWindowDaySunday string = "Sunday"
)

// prop value enum
func (m *MaintenanceWindow) validateDayEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, maintenanceWindowTypeDayPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MaintenanceWindow) validateDay(formats strfmt.Registry) error {

	if err := validate.Required("day", "body", m.Day); err != nil {
		return err
	}

	// value enum
	if err := m.validateDayEnum("day", "body", *m.Day); err != nil {
		return err
	}

	return nil
}

func (m *MaintenanceWindow) validateStartHour(formats strfmt.Registry) error {

	if err := validate.Required("startHour", "body", m.StartHour); err != nil {
		return err
	}

	if err := validate.MinimumInt("startHour", "body", int64(*m.StartHour), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("startHour", "body", int64(*m.StartHour), 11, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MaintenanceWindow) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MaintenanceWindow) UnmarshalBinary(b []byte) error {
	var res MaintenanceWindow
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
