package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	client2 "github.com/go-openapi/runtime/client"
	"github.com/kuberlogic/kuberlogic/modules/dynamic-apiserver/pkg/generated/client"
	"github.com/kuberlogic/kuberlogic/modules/dynamic-apiserver/pkg/generated/client/service"
	"github.com/spf13/viper"

	"github.com/spf13/cobra"
)

// makeServiceDeleteCmd returns a cmd to handle operation serviceDelete
func makeServiceDeleteCmd(apiClientFunc func() (*client.ServiceAPI, error)) *cobra.Command {
	cmd := &cobra.Command{
		Use:     "serviceDelete",
		Short:   `Deletes a service object`,
		Aliases: []string{"delete"},
		RunE:    runServiceDelete(apiClientFunc),
	}

	_ = cmd.PersistentFlags().String("id", "", "service id")

	return cmd
}

// runServiceDelete uses cmd flags to call endpoint api
func runServiceDelete(apiClientFunc func() (*client.ServiceAPI, error)) func(cmd *cobra.Command, args []string) error {
	return func(cmd *cobra.Command, args []string) error {

		apiClient, err := apiClientFunc()
		if err != nil {
			return err
		}

		// retrieve flag values from cmd and fill params
		params := service.NewServiceDeleteParams()

		var id string
		if value, err := getString(cmd, "id"); err != nil {
			return err
		} else if value != nil {
			id = *value
		}
		params.ServiceID = id

		var formatResponse format
		if value, err := getString(cmd, "format"); err != nil {
			return err
		} else if value != nil {
			formatResponse = format(*value)
		}

		if dryRun {
			logDebugf("dry-run flag specified. Skip sending request.")
			return nil
		}

		response, err := apiClient.Service.ServiceDelete(params, client2.APIKeyAuth("X-Token", "header", viper.GetString("token")))
		if err != nil {
			return humanizeError(err)
		}
		if isDefaultPrintFormat(formatResponse) {
			_, err := fmt.Fprintf(cmd.OutOrStdout(), "Service '%s' successfully removed\n", id)
			return err
		} else {
			return printResult(cmd, formatResponse, response)
		}
	}
}
