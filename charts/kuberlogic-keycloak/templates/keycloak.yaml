---
apiVersion: keycloak.org/v1alpha1
kind: Keycloak
metadata:
  name: kuberlogic-keycloak
  namespace: {{ .Release.Namespace }}
  labels:
  {{ toYaml .Values.labels | nindent 4 }}
spec:
  instances: 1
  extensions:
    - https://github.com/aerogear/keycloak-metrics-spi/releases/download/1.0.4/keycloak-metrics-spi-1.0.4.jar
  externalAccess:
    enabled: False
  podDisruptionBudget:
    enabled: False
  externalDatabase:
    enabled: False
---
apiVersion: keycloak.org/v1alpha1
kind: KeycloakRealm
metadata:
  name: kuberlogic
  namespace: {{ .Release.Namespace }}
  labels:
  {{ toYaml .Values.labels | nindent 4 }}
spec:
  realm:
    id: "{{ .Values.realm.id }}"
    realm: "{{ .Values.realm.name }}"
    accessTokenLifespan: 3600
    accessTokenLifespanForImplicitFlow: 3600
    registrationAllowed: false
    enabled: true
    displayName: "Kuberlogic"
    eventsListeners:
      - "metrics-listener"
    userManagedAccessAllowed: true
    clients:
    - clientId: {{ .Values.clientId }}
      secret: {{ .Values.clientSecret }}
      clientAuthenticatorType: client-secret
      protocol: openid-connect
      directAccessGrantsEnabled: true
      serviceAccountsEnabled: true
      authorizationServicesEnabled: {{ .Values.authorization.enabled }}
      authorizationSettings:
        allowRemoteResourceManagement: true
        resources:
          - name: "*"
            type: kuberlogicservice
            scopes:
              - name: "service:*"
          {{ if .Values.testUser.create }}
          - name: "{{ .Values.testUser.tenantId }}:*"
            type: kuberlogicservice
            scopes:
              - name: "service:*"
        {{ end }}
        policies:
          {{ if .Values.testUser.create }}
          - name: {{ .Values.testUser.username }}
            type: user
            logic: POSITIVE
            config:
              users: '["{{ .Values.testUser.username }}"]'
          - name: sample-user-full
            type: scope
            decisionStrategy: UNANIMOUS
            config:
              applyPolicies: '["{{ .Values.testUser.username }}"]'
              scopes: '["service:*"]'
              resources: '["{{ .Values.testUser.tenantId }}:*"]'
          {{ end }}
          - name: kuberlogic-system-allow
            type: user
            logic: POSITIVE
            config:
              users: '["{{ .Values.realm.name }}"]'
          - name: kuberlogic-system-full
            type: scope
            decisionStrategy: UNANIMOUS
            config:
              applyPolicies: '["kuberlogic-system-allow"]'
              scopes: '["service:*"]'
              resources: '["*"]'
      protocolMappers:
        - name: "apiserver-aud"
          protocol: "openid-connect"
          consentRequired: false
          protocolMapper: "oidc-audience-mapper"
          config:
            included.client.audience: "{{ .Values.clientId }}"
            access.token.claim: "true"
      attributes:
        access.token.lifespan: "{{ .Values.sessionExpiration }}"
        client.session.idle.timeout: "{{ .Values.sessionExpiration }}"
      defaultRoles:
        - "uma_protection"
      defaultClientScopes:
        - email
        - profile
        - roles
        - web-origins
      optionalClientScopes:
        - email
        - profile
        - roles
        - offline_access
        - web-origins
    users:
      {{ if .Values.testUser.create }}
      - credentials:
          - type: password
            value: {{ .Values.testUser.password }}
            temporary: false
        email: {{ .Values.testUser.email }}
        id: {{ .Values.testUser.username }}
        username: {{ .Values.testUser.username }}
        enabled: true
        firstName: Test
        lastName: User
        realmRoles:
          - "offline_access"
          - "uma_authorization"
        clientRoles:
          account:
            - manage-account
            - view-profile
      {{- end }}
      - username: "{{ .Values.realm.name }}"
        firstName: "Kuberlogic"
        lastName: "Realm"
        email: "realm@kuberlogic.com"
        emailVerified: False
        credentials:
          - type: password
            value: {{ .Values.realm.adminPassword }}
            temporary: false
        realmRoles:
          - "offline_access"
          - "uma_authorization"
          - "uma_protection"
        clientRoles:
          account:
            - "manage-account"
            - "view-profile"
          realm-management:
            - "manage-users"
            - "view-users"
            - "query-users"
            - "create-client"
  instanceSelector:
    matchLabels:
  {{ toYaml .Values.labels | nindent 6 }}