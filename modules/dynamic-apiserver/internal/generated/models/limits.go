// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Limits limits
//
// swagger:model Limits
type Limits struct {

	// cpu
	// Pattern: ^([0-9]+$)|([0-9]+.[0-9]+$)
	CPU string `json:"cpu,omitempty"`

	// memory
	// Pattern: ^([0-9]+$)|([0-9]+.[0-9]+$)
	Memory string `json:"memory,omitempty"`

	// volume size
	// Pattern: ^([0-9]+$)|([0-9]+.[0-9]+$)
	VolumeSize string `json:"volumeSize,omitempty"`
}

// Validate validates this limits
func (m *Limits) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCPU(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumeSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Limits) validateCPU(formats strfmt.Registry) error {
	if swag.IsZero(m.CPU) { // not required
		return nil
	}

	if err := validate.Pattern("cpu", "body", m.CPU, `^([0-9]+$)|([0-9]+.[0-9]+$)`); err != nil {
		return err
	}

	return nil
}

func (m *Limits) validateMemory(formats strfmt.Registry) error {
	if swag.IsZero(m.Memory) { // not required
		return nil
	}

	if err := validate.Pattern("memory", "body", m.Memory, `^([0-9]+$)|([0-9]+.[0-9]+$)`); err != nil {
		return err
	}

	return nil
}

func (m *Limits) validateVolumeSize(formats strfmt.Registry) error {
	if swag.IsZero(m.VolumeSize) { // not required
		return nil
	}

	if err := validate.Pattern("volumeSize", "body", m.VolumeSize, `^([0-9]+$)|([0-9]+.[0-9]+$)`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this limits based on context it is used
func (m *Limits) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Limits) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Limits) UnmarshalBinary(b []byte) error {
	var res Limits
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
