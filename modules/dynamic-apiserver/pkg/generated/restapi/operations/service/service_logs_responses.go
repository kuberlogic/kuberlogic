// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/kuberlogic/kuberlogic/modules/dynamic-apiserver/pkg/generated/models"
)

// ServiceLogsOKCode is the HTTP code returned for type ServiceLogsOK
const ServiceLogsOKCode int = 200

/*ServiceLogsOK kuberlogic service logs

swagger:response serviceLogsOK
*/
type ServiceLogsOK struct {

	/*
	  In: Body
	*/
	Payload models.Logs `json:"body,omitempty"`
}

// NewServiceLogsOK creates ServiceLogsOK with default headers values
func NewServiceLogsOK() *ServiceLogsOK {

	return &ServiceLogsOK{}
}

// WithPayload adds the payload to the service logs o k response
func (o *ServiceLogsOK) WithPayload(payload models.Logs) *ServiceLogsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the service logs o k response
func (o *ServiceLogsOK) SetPayload(payload models.Logs) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ServiceLogsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = models.Logs{}
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ServiceLogsBadRequestCode is the HTTP code returned for type ServiceLogsBadRequest
const ServiceLogsBadRequestCode int = 400

/*ServiceLogsBadRequest bad input parameter

swagger:response serviceLogsBadRequest
*/
type ServiceLogsBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewServiceLogsBadRequest creates ServiceLogsBadRequest with default headers values
func NewServiceLogsBadRequest() *ServiceLogsBadRequest {

	return &ServiceLogsBadRequest{}
}

// WithPayload adds the payload to the service logs bad request response
func (o *ServiceLogsBadRequest) WithPayload(payload *models.Error) *ServiceLogsBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the service logs bad request response
func (o *ServiceLogsBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ServiceLogsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ServiceLogsUnauthorizedCode is the HTTP code returned for type ServiceLogsUnauthorized
const ServiceLogsUnauthorizedCode int = 401

/*ServiceLogsUnauthorized bad authentication

swagger:response serviceLogsUnauthorized
*/
type ServiceLogsUnauthorized struct {
}

// NewServiceLogsUnauthorized creates ServiceLogsUnauthorized with default headers values
func NewServiceLogsUnauthorized() *ServiceLogsUnauthorized {

	return &ServiceLogsUnauthorized{}
}

// WriteResponse to the client
func (o *ServiceLogsUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(401)
}

// ServiceLogsForbiddenCode is the HTTP code returned for type ServiceLogsForbidden
const ServiceLogsForbiddenCode int = 403

/*ServiceLogsForbidden bad permissions

swagger:response serviceLogsForbidden
*/
type ServiceLogsForbidden struct {
}

// NewServiceLogsForbidden creates ServiceLogsForbidden with default headers values
func NewServiceLogsForbidden() *ServiceLogsForbidden {

	return &ServiceLogsForbidden{}
}

// WriteResponse to the client
func (o *ServiceLogsForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(403)
}

// ServiceLogsUnprocessableEntityCode is the HTTP code returned for type ServiceLogsUnprocessableEntity
const ServiceLogsUnprocessableEntityCode int = 422

/*ServiceLogsUnprocessableEntity bad validation

swagger:response serviceLogsUnprocessableEntity
*/
type ServiceLogsUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewServiceLogsUnprocessableEntity creates ServiceLogsUnprocessableEntity with default headers values
func NewServiceLogsUnprocessableEntity() *ServiceLogsUnprocessableEntity {

	return &ServiceLogsUnprocessableEntity{}
}

// WithPayload adds the payload to the service logs unprocessable entity response
func (o *ServiceLogsUnprocessableEntity) WithPayload(payload *models.Error) *ServiceLogsUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the service logs unprocessable entity response
func (o *ServiceLogsUnprocessableEntity) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ServiceLogsUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ServiceLogsServiceUnavailableCode is the HTTP code returned for type ServiceLogsServiceUnavailable
const ServiceLogsServiceUnavailableCode int = 503

/*ServiceLogsServiceUnavailable internal server error

swagger:response serviceLogsServiceUnavailable
*/
type ServiceLogsServiceUnavailable struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewServiceLogsServiceUnavailable creates ServiceLogsServiceUnavailable with default headers values
func NewServiceLogsServiceUnavailable() *ServiceLogsServiceUnavailable {

	return &ServiceLogsServiceUnavailable{}
}

// WithPayload adds the payload to the service logs service unavailable response
func (o *ServiceLogsServiceUnavailable) WithPayload(payload *models.Error) *ServiceLogsServiceUnavailable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the service logs service unavailable response
func (o *ServiceLogsServiceUnavailable) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ServiceLogsServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(503)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
