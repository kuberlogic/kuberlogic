name: Development build

on:
  push:
    branches: [ master ]

jobs:
  build:
    name: Build images
    runs-on: ubuntu-latest
    env:
      USE_BUILD: true
      USE_BUILDX: true
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          # 0 - all history, it uses in generating part of BUILD in version
          fetch-depth: 0

      - uses: actions/setup-go@v2
        with:
          go-version: '1.16.0'

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: buildx-cache-${{ github.run.id }}
          restore-keys: |
            buildx-cache-

      - name: Cache installer
        uses: actions/cache@v2
        with:
          path: ./modules/installer/bin
          key: installer-${{ github.sha }}

      - name: Build installer & images
        run: |
          make docker-build installer-build

      - name: Login to Docker Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_SERVER }}
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Save image's cache
        run: |
          make docker-push-cache

  setup_and_test:
    name: Setup and test
    runs-on: ubuntu-latest
    needs: build
    env:
      USE_BUILD: true
    strategy:
      matrix:
        include:
          - type: postgresql
            pg_version: 13
          - type: mysql
            my_version: 5.7.31

    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: '1.16.0'

      - name: Checkout
        uses: actions/checkout@v2
        with:
          # 0 - all history, it uses in generating part of BUILD in version
          fetch-depth: 0

      - name: Setup Minikube
        uses: manusa/actions-setup-minikube@v2.3.0
        with:
          minikube version: 'v1.19.0'
          kubernetes version: 'v1.20.5'
          github token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure logs
        working-directory: ./modules/apiserver/tests
        run: |
          echo Your testid label value is $GITHUB_RUN_ID
          make configure-logs
        env:
          LOGZ_IO_TOKEN: ${{ secrets.LOGZ_IO_TOKEN }}
          LOGZ_IO_LISTENER: ${{ secrets.LOGZ_IO_LISTENER }}

      - name: Restore cached images
        run: |
          make docker-restore-cache

      - name: Fake loadbalancer service by installing metallb
        run: |
          helm repo add metallb https://metallb.github.io/metallb
          helm install --set "configInline.address-pools[0].name=default,configInline.address-pools[0].protocol=layer2,configInline.address-pools[0].addresses[0]=198.51.100.0/24" metallb metallb/metallb

      - name: Set kuberlogic context
        run: |
          kubectl config set-context --current --namespace=kuberlogic

      - name: Restore installer
        uses: actions/cache@v2
        with:
          path: ./modules/installer/bin
          key: installer-${{ github.sha }}

      - name: Run installer
        working-directory: ./modules/installer
        run: |
          ./bin/kuberlogic-installer-linux-amd64 install all -c sample-config.yaml

      - name: Setup minio & create test backet for backup storage
        working-directory: ./modules/apiserver/tests
        run: |
          make deploy-minio create-bucket

      - name: Show pod status
        run: |
          kubectl logs -l app=minio
          docker images
        if: ${{ failure() }}

      - name: Run tests against ready environment
        working-directory: ./modules/apiserver/tests
        run: |
          KUBERLOGIC_KUBECONFIGPATH=${HOME}/.kube/config make remote-test RUN=/$TYPE
        env:
          PG_VERSION: ${{ matrix.pg_version }}
          MY_VERSION: ${{ matrix.my_version }}
          TYPE: ${{ matrix.type }}

      - name: Show status
        run: |
          kubectl get pod,sts,deploy,svc,cj,job -o yaml
        if: ${{ failure() }}

      - name: Generating logs
        working-directory: ./modules/apiserver/tests
        run: |
          for p in $(kubectl get pods -o custom-columns=:.metadata.name); do
            kubectl describe pod $p > kuberlogic-$p-describe.log
            kubectl logs --tail=-1 --all-containers $p > kuberlogic-$p-logs.log
          done

          kubectl get pod -o yaml --all-namespaces > pods-status.log
          kubectl get secrets -o yaml --all-namespaces > secrets.log
          kubectl get endpoints -o yaml --all-namespaces > endpoints.log
          kubectl get services -o yaml --all-namespaces > services.log
          kubectl get kuberlogic -o yaml --all-namespaces > kuberlogics.log
        if: ${{ always() }}
        continue-on-error: true

      - name: Archive logs
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.type }}-${{ matrix.pg_version }}${{ matrix.my_version }}
          path: |
            ./modules/apiserver/tests/*.log
            ./modules/installer/bin/*
        if: ${{ always() }}

  release:
    name: Release images
    runs-on: ubuntu-latest
    needs: setup_and_test
    env:
      USE_BUILD: true
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          # 0 - all history, it uses in generating part of BUILD in version
          fetch-depth: 0

      - name: Login to Docker Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_SERVER }}
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Restore cached images
        run: |
          make docker-restore-cache

      - name: Push the new images
        run: |
          make docker-push

      - name: Restore installer
        uses: actions/cache@v2
        with:
          path: ./modules/installer/bin
          key: installer-${{ github.sha }}

      - name: Release installer
        uses: marvinpinto/action-automatic-releases@v1.2.1
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: true
          title: "Development Build"
          files: |
            ./modules/installer/bin/*
