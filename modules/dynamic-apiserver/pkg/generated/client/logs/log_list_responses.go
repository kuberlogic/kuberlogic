// Code generated by go-swagger; DO NOT EDIT.

package logs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kuberlogic/kuberlogic/modules/dynamic-apiserver/pkg/generated/models"
)

// LogListReader is a Reader for the LogList structure.
type LogListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LogListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewLogListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewLogListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewLogListUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewLogListForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewLogListUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewLogListServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewLogListOK creates a LogListOK with default headers values
func NewLogListOK() *LogListOK {
	return &LogListOK{}
}

/* LogListOK describes a response with status code 200, with default header values.

search results matching criteria
*/
type LogListOK struct {
	Payload models.Logs
}

func (o *LogListOK) Error() string {
	return fmt.Sprintf("[GET /logs/][%d] logListOK  %+v", 200, o.Payload)
}
func (o *LogListOK) GetPayload() models.Logs {
	return o.Payload
}

func (o *LogListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLogListBadRequest creates a LogListBadRequest with default headers values
func NewLogListBadRequest() *LogListBadRequest {
	return &LogListBadRequest{}
}

/* LogListBadRequest describes a response with status code 400, with default header values.

bad input parameter
*/
type LogListBadRequest struct {
	Payload *models.Error
}

func (o *LogListBadRequest) Error() string {
	return fmt.Sprintf("[GET /logs/][%d] logListBadRequest  %+v", 400, o.Payload)
}
func (o *LogListBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *LogListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLogListUnauthorized creates a LogListUnauthorized with default headers values
func NewLogListUnauthorized() *LogListUnauthorized {
	return &LogListUnauthorized{}
}

/* LogListUnauthorized describes a response with status code 401, with default header values.

bad authentication
*/
type LogListUnauthorized struct {
}

func (o *LogListUnauthorized) Error() string {
	return fmt.Sprintf("[GET /logs/][%d] logListUnauthorized ", 401)
}

func (o *LogListUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLogListForbidden creates a LogListForbidden with default headers values
func NewLogListForbidden() *LogListForbidden {
	return &LogListForbidden{}
}

/* LogListForbidden describes a response with status code 403, with default header values.

bad permissions
*/
type LogListForbidden struct {
}

func (o *LogListForbidden) Error() string {
	return fmt.Sprintf("[GET /logs/][%d] logListForbidden ", 403)
}

func (o *LogListForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLogListUnprocessableEntity creates a LogListUnprocessableEntity with default headers values
func NewLogListUnprocessableEntity() *LogListUnprocessableEntity {
	return &LogListUnprocessableEntity{}
}

/* LogListUnprocessableEntity describes a response with status code 422, with default header values.

bad validation
*/
type LogListUnprocessableEntity struct {
	Payload *models.Error
}

func (o *LogListUnprocessableEntity) Error() string {
	return fmt.Sprintf("[GET /logs/][%d] logListUnprocessableEntity  %+v", 422, o.Payload)
}
func (o *LogListUnprocessableEntity) GetPayload() *models.Error {
	return o.Payload
}

func (o *LogListUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLogListServiceUnavailable creates a LogListServiceUnavailable with default headers values
func NewLogListServiceUnavailable() *LogListServiceUnavailable {
	return &LogListServiceUnavailable{}
}

/* LogListServiceUnavailable describes a response with status code 503, with default header values.

internal server error
*/
type LogListServiceUnavailable struct {
	Payload *models.Error
}

func (o *LogListServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /logs/][%d] logListServiceUnavailable  %+v", 503, o.Payload)
}
func (o *LogListServiceUnavailable) GetPayload() *models.Error {
	return o.Payload
}

func (o *LogListServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
