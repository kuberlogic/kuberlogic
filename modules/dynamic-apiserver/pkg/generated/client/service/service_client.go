// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ServiceAdd(params *ServiceAddParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServiceAddCreated, error)

	ServiceDelete(params *ServiceDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServiceDeleteOK, error)

	ServiceEdit(params *ServiceEditParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServiceEditOK, error)

	ServiceGet(params *ServiceGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServiceGetOK, error)

	ServiceList(params *ServiceListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServiceListOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ServiceAdd adds a service item

  Adds service object

*/
func (a *Client) ServiceAdd(params *ServiceAddParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServiceAddCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceAddParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "serviceAdd",
		Method:             "POST",
		PathPattern:        "/services/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServiceAddReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceAddCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for serviceAdd: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServiceDelete deletes a service item

  Deletes a service object

*/
func (a *Client) ServiceDelete(params *ServiceDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServiceDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "serviceDelete",
		Method:             "DELETE",
		PathPattern:        "/services/{ServiceID}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServiceDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for serviceDelete: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServiceEdit edits a service item

  Edit service object

*/
func (a *Client) ServiceEdit(params *ServiceEditParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServiceEditOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceEditParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "serviceEdit",
		Method:             "PATCH",
		PathPattern:        "/services/{ServiceID}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServiceEditReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceEditOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for serviceEdit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServiceGet gets a service item

  Get service object

*/
func (a *Client) ServiceGet(params *ServiceGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServiceGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "serviceGet",
		Method:             "GET",
		PathPattern:        "/services/{ServiceID}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServiceGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for serviceGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ServiceList lists all services

  List of service objects

*/
func (a *Client) ServiceList(params *ServiceListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ServiceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewServiceListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "serviceList",
		Method:             "GET",
		PathPattern:        "/services/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ServiceListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ServiceListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for serviceList: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
