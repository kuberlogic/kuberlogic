{{ if .Values.grafana.enabled }}
{{ if .Values.grafana.mysql.enabled }}
---
apiVersion: mysql.presslabs.org/v1alpha1
kind: MysqlCluster
metadata:
  name: {{ .Values.grafana.mysql.name }}
  namespace: {{ .Release.Namespace }}
spec:
  replicas: 1
  secretName: {{ .Values.grafana.mysql.secretName }}
  volumeSpec:
    persistentVolumeClaim:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 2Gi
---
apiVersion: mysql.presslabs.org/v1alpha1
kind: MysqlDatabase
metadata:
  name: {{ .Values.grafana.mysql.db }}
  namespace: {{ .Release.Namespace }}
spec:
  database: {{ .Values.grafana.mysql.db }}
  clusterRef:
    name: {{ .Values.grafana.mysql.name }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.grafana.mysql.secretName }}
  namespace: {{ .Release.Namespace }}
type: Opaque
data:
  ROOT_PASSWORD: {{ .Values.grafana.mysql.rootPassword | b64enc }}
{{ end }}
---
apiVersion: v1
data:
  PASSWORD: {{ .Values.grafana.admin.password | b64enc }}
  USER: {{ .Values.grafana.admin.user | b64enc }}
kind: Secret
metadata:
  name: {{ .Values.grafana.secretName }}
  namespace: {{ .Release.Namespace }}
type: Opaque
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.grafana.service.name }}
  namespace: {{ .Release.Namespace }}
spec:
  ports:
    - name: http
      port: {{ .Values.grafana.port }}
      targetPort: {{ .Values.grafana.port }}
  selector:
    app.kubernetes.io/component: grafana
    {{- include "monitoring.labels" . | nindent 4 }}
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "monitoring.fullname" . }}-grafana
spec:
  replicas: {{ .Values.grafana.replicas }}
  selector:
    matchLabels:
      app.kubernetes.io/component: grafana
      {{- include "monitoring.labels" . | nindent 6 }}
  template:
    metadata:
      labels:
        app.kubernetes.io/component: grafana
        {{- include "monitoring.labels" . | nindent 8 }}
    spec:
      {{ with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8  }}
      {{ end }}
      serviceAccountName: {{ .Values.grafana.serviceAccountName }}
      volumes:
        - name: grafana-default-dashboards
          configMap:
            name: {{ include "monitoring.fullname" . }}-grafana-dash
      containers:
        - name: grafana
          volumeMounts:
            - mountPath: /usr/share/grafana/public/dashboards
              name: grafana-default-dashboards
          image: {{ .Values.grafana.image.repository }}:{{ .Values.grafana.image.tag }}
          ports:
            - name: grafana
              containerPort: {{ .Values.grafana.port }}
          env:
            - name: GF_SECURITY_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.grafana.secretName }}
                  key: USER
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.grafana.secretName }}
                  key: PASSWORD
            {{ if .Values.grafana.mysql.enabled }}
            - name: GF_DATABASE_TYPE
              value: mysql
            - name: GF_DATABASE_HOST
              value: grafana-mysql:3306
            - name: GF_DATABASE_NAME
              value: {{ .Values.grafana.mysql.db }}
            - name: GF_DATABASE_USER
              value: root
            - name: GF_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.grafana.mysql.secretName }}
                  key: ROOT_PASSWORD
            - name: GF_AUTH_PROXY_ENABLED
              value: "true"
            - name: GF_AUTH_PROXY_HEADER_NAME
              value: {{ .Values.grafana.auth.headerName }}
            - name: GF_AUTH_PROXY_HEADER_PROPERTY
              value: email
            - name: GF_AUTH_PROXY_AUTO_SIGN_UP
              value: "false"
            - name: GF_AUTH_PROXY_ENABLE_LOGIN_TOKEN
              value: "true"
            {{ end }}
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: {{ .Values.grafana.serviceAccountName }}
  namespace: {{ .Release.Namespace }}
{{ if .Values.grafana.ingress.enabled }}
  {{ if and .Values.grafana.ingress.tls.ca .Values.grafana.ingress.tls.crt .Values.grafana.ingress.tls.key }}
---
apiVersion: v1
kind: Secret
metadata:
  name: kuberlogic-grafana-cert
  namespace: {{ .Release.Namespace }}
data:
  ca.crt: |-
  {{ b64enc .Values.grafana.ingress.tls.ca | indent 2 }}
  tls.crt: |-
  {{ b64enc .Values.grafana.ingress.tls.crt | indent 2 }}
  tls.key: |-
    {{ b64enc .Values.grafana.ingress.tls.key | indent 2 }}

  {{ end }}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ .Values.grafana.service.name }}
  namespace: {{ .Release.Namespace }}
  annotations:
    konghq.com/https-redirect-status-code: "301"
    konghq.com/protocols: https
    {{ if not (and .Values.grafana.ingress.tls.ca .Values.grafana.ingress.tls.crt .Values.grafana.ingress.tls.key) }}
    # kuberlogic-selfsigned issuer also is used for sign kuberlogic webhook
    cert-manager.io/issuer: kuberlogic-selfsigned
    {{ end }}
    {{ with .Values.grafana.ingress.grafana.annotations }}
    {{ . | toYaml | nindent 4 }}
    {{ end }}
spec:
  ingressClassName: {{ .Values.grafana.ingress.class }}
  tls:
    - hosts:
        - {{ .Values.grafana.ingress.host }}
      secretName: kuberlogic-grafana-cert
  rules:
    - host: {{ .Values.grafana.ingress.host }}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: {{ .Values.grafana.service.name }}
                port:
                  number: {{ .Values.grafana.port }}
---
# the main different between this ingress resource and resource above --
# this resource (with -login suffix) using konghq plugin for autentication JWT token in Keycloak
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ .Values.grafana.service.name }}-login
  namespace: {{ .Release.Namespace }}
  annotations:
    konghq.com/https-redirect-status-code: "301"
    konghq.com/protocols: https
    {{ if not (and .Values.grafana.ingress.tls.ca .Values.grafana.ingress.tls.crt .Values.grafana.ingress.tls.key) }}
    # kuberlogic-selfsigned issuer also is used for sign kuberlogic webhook
    cert-manager.io/issuer: kuberlogic-selfsigned
    {{ end }}
    {{ with .Values.grafana.ingress.grafanaLogin.annotations}}
    {{ .  | toYaml | nindent 4 }}
    {{ end }}
spec:
  ingressClassName: {{ .Values.grafana.ingress.class }}
  tls:
    - hosts:
        - {{ .Values.grafana.ingress.host }}
      secretName: kuberlogic-grafana-cert
  rules:
    - host: {{ .Values.grafana.ingress.host }}
      http:
        paths:
          - backend:
              service:
                name: {{ .Values.grafana.service.name }}
                port:
                  number: {{ .Values.grafana.port }}
            path: /login
            pathType: Prefix
{{ end }}
{{ end }}