// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kuberlogic/kuberlogic/modules/dynamic-apiserver/pkg/generated/models"
)

// ServiceSecretsListReader is a Reader for the ServiceSecretsList structure.
type ServiceSecretsListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ServiceSecretsListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewServiceSecretsListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewServiceSecretsListBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewServiceSecretsListUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewServiceSecretsListForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewServiceSecretsListServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewServiceSecretsListOK creates a ServiceSecretsListOK with default headers values
func NewServiceSecretsListOK() *ServiceSecretsListOK {
	return &ServiceSecretsListOK{}
}

/* ServiceSecretsListOK describes a response with status code 200, with default header values.

service secrets
*/
type ServiceSecretsListOK struct {
	Payload models.ServiceSecrets
}

func (o *ServiceSecretsListOK) Error() string {
	return fmt.Sprintf("[GET /services/{ServiceID}/secrets][%d] serviceSecretsListOK  %+v", 200, o.Payload)
}
func (o *ServiceSecretsListOK) GetPayload() models.ServiceSecrets {
	return o.Payload
}

func (o *ServiceSecretsListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServiceSecretsListBadRequest creates a ServiceSecretsListBadRequest with default headers values
func NewServiceSecretsListBadRequest() *ServiceSecretsListBadRequest {
	return &ServiceSecretsListBadRequest{}
}

/* ServiceSecretsListBadRequest describes a response with status code 400, with default header values.

invalid input, object invalid
*/
type ServiceSecretsListBadRequest struct {
	Payload *models.Error
}

func (o *ServiceSecretsListBadRequest) Error() string {
	return fmt.Sprintf("[GET /services/{ServiceID}/secrets][%d] serviceSecretsListBadRequest  %+v", 400, o.Payload)
}
func (o *ServiceSecretsListBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *ServiceSecretsListBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewServiceSecretsListUnauthorized creates a ServiceSecretsListUnauthorized with default headers values
func NewServiceSecretsListUnauthorized() *ServiceSecretsListUnauthorized {
	return &ServiceSecretsListUnauthorized{}
}

/* ServiceSecretsListUnauthorized describes a response with status code 401, with default header values.

bad authentication
*/
type ServiceSecretsListUnauthorized struct {
}

func (o *ServiceSecretsListUnauthorized) Error() string {
	return fmt.Sprintf("[GET /services/{ServiceID}/secrets][%d] serviceSecretsListUnauthorized ", 401)
}

func (o *ServiceSecretsListUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewServiceSecretsListForbidden creates a ServiceSecretsListForbidden with default headers values
func NewServiceSecretsListForbidden() *ServiceSecretsListForbidden {
	return &ServiceSecretsListForbidden{}
}

/* ServiceSecretsListForbidden describes a response with status code 403, with default header values.

bad permissions
*/
type ServiceSecretsListForbidden struct {
}

func (o *ServiceSecretsListForbidden) Error() string {
	return fmt.Sprintf("[GET /services/{ServiceID}/secrets][%d] serviceSecretsListForbidden ", 403)
}

func (o *ServiceSecretsListForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewServiceSecretsListServiceUnavailable creates a ServiceSecretsListServiceUnavailable with default headers values
func NewServiceSecretsListServiceUnavailable() *ServiceSecretsListServiceUnavailable {
	return &ServiceSecretsListServiceUnavailable{}
}

/* ServiceSecretsListServiceUnavailable describes a response with status code 503, with default header values.

internal service error
*/
type ServiceSecretsListServiceUnavailable struct {
	Payload *models.Error
}

func (o *ServiceSecretsListServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /services/{ServiceID}/secrets][%d] serviceSecretsListServiceUnavailable  %+v", 503, o.Payload)
}
func (o *ServiceSecretsListServiceUnavailable) GetPayload() *models.Error {
	return o.Payload
}

func (o *ServiceSecretsListServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
