// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/kuberlogic/kuberlogic/modules/dynamic-apiserver/internal/generated/models"
	"github.com/spf13/cobra"
)

// Schema cli for Limits

// register flags to command
func registerModelLimitsFlags(depth int, cmdPrefix string, cmd *cobra.Command) error {

	if err := registerLimitsCPU(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLimitsMemory(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerLimitsVolumeSize(depth, cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerLimitsCPU(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	cpuDescription := ``

	var cpuFlagName string
	if cmdPrefix == "" {
		cpuFlagName = "cpu"
	} else {
		cpuFlagName = fmt.Sprintf("%v.cpu", cmdPrefix)
	}

	var cpuFlagDefault string

	_ = cmd.PersistentFlags().String(cpuFlagName, cpuFlagDefault, cpuDescription)

	return nil
}

func registerLimitsMemory(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	memoryDescription := ``

	var memoryFlagName string
	if cmdPrefix == "" {
		memoryFlagName = "memory"
	} else {
		memoryFlagName = fmt.Sprintf("%v.memory", cmdPrefix)
	}

	var memoryFlagDefault string

	_ = cmd.PersistentFlags().String(memoryFlagName, memoryFlagDefault, memoryDescription)

	return nil
}

func registerLimitsVolumeSize(depth int, cmdPrefix string, cmd *cobra.Command) error {
	if depth > maxDepth {
		return nil
	}

	volumeSizeDescription := ``

	var volumeSizeFlagName string
	if cmdPrefix == "" {
		volumeSizeFlagName = "volumeSize"
	} else {
		volumeSizeFlagName = fmt.Sprintf("%v.volumeSize", cmdPrefix)
	}

	var volumeSizeFlagDefault string

	_ = cmd.PersistentFlags().String(volumeSizeFlagName, volumeSizeFlagDefault, volumeSizeDescription)

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveModelLimitsFlags(depth int, m *models.Limits, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, cpuAdded := retrieveLimitsCPUFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || cpuAdded

	err, memoryAdded := retrieveLimitsMemoryFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || memoryAdded

	err, volumeSizeAdded := retrieveLimitsVolumeSizeFlags(depth, m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || volumeSizeAdded

	return nil, retAdded
}

func retrieveLimitsCPUFlags(depth int, m *models.Limits, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	cpuFlagName := fmt.Sprintf("%v.cpu", cmdPrefix)
	if cmd.Flags().Changed(cpuFlagName) {

		var cpuFlagName string
		if cmdPrefix == "" {
			cpuFlagName = "cpu"
		} else {
			cpuFlagName = fmt.Sprintf("%v.cpu", cmdPrefix)
		}

		cpuFlagValue, err := cmd.Flags().GetString(cpuFlagName)
		if err != nil {
			return err, false
		}
		m.CPU = cpuFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLimitsMemoryFlags(depth int, m *models.Limits, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	memoryFlagName := fmt.Sprintf("%v.memory", cmdPrefix)
	if cmd.Flags().Changed(memoryFlagName) {

		var memoryFlagName string
		if cmdPrefix == "" {
			memoryFlagName = "memory"
		} else {
			memoryFlagName = fmt.Sprintf("%v.memory", cmdPrefix)
		}

		memoryFlagValue, err := cmd.Flags().GetString(memoryFlagName)
		if err != nil {
			return err, false
		}
		m.Memory = memoryFlagValue

		retAdded = true
	}

	return nil, retAdded
}

func retrieveLimitsVolumeSizeFlags(depth int, m *models.Limits, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	if depth > maxDepth {
		return nil, false
	}
	retAdded := false

	volumeSizeFlagName := fmt.Sprintf("%v.volumeSize", cmdPrefix)
	if cmd.Flags().Changed(volumeSizeFlagName) {

		var volumeSizeFlagName string
		if cmdPrefix == "" {
			volumeSizeFlagName = "volumeSize"
		} else {
			volumeSizeFlagName = fmt.Sprintf("%v.volumeSize", cmdPrefix)
		}

		volumeSizeFlagValue, err := cmd.Flags().GetString(volumeSizeFlagName)
		if err != nil {
			return err, false
		}
		m.VolumeSize = volumeSizeFlagValue

		retAdded = true
	}

	return nil, retAdded
}
