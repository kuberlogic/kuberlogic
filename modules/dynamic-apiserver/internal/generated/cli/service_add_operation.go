// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"

	"github.com/kuberlogic/kuberlogic/modules/dynamic-apiserver/internal/generated/client/service"
	"github.com/kuberlogic/kuberlogic/modules/dynamic-apiserver/internal/generated/models"

	"github.com/go-openapi/swag"
	"github.com/spf13/cobra"
)

// makeOperationServiceServiceAddCmd returns a cmd to handle operation serviceAdd
func makeOperationServiceServiceAddCmd() (*cobra.Command, error) {
	cmd := &cobra.Command{
		Use: "serviceAdd",
		Short: `Adds service object
`,
		RunE: runOperationServiceServiceAdd,
	}

	if err := registerOperationServiceServiceAddParamFlags(cmd); err != nil {
		return nil, err
	}

	return cmd, nil
}

// runOperationServiceServiceAdd uses cmd flags to call endpoint api
func runOperationServiceServiceAdd(cmd *cobra.Command, args []string) error {
	appCli, err := makeClient(cmd, args)
	if err != nil {
		return err
	}
	// retrieve flag values from cmd and fill params
	params := service.NewServiceAddParams()
	if err, _ := retrieveOperationServiceServiceAddServiceItemFlag(params, "", cmd); err != nil {
		return err
	}
	if dryRun {

		logDebugf("dry-run flag specified. Skip sending request.")
		return nil
	}
	// make request and then print result
	msgStr, err := parseOperationServiceServiceAddResult(appCli.Service.ServiceAdd(params))
	if err != nil {
		return err
	}
	if !debug {

		fmt.Println(msgStr)
	}
	return nil
}

// registerOperationServiceServiceAddParamFlags registers all flags needed to fill params
func registerOperationServiceServiceAddParamFlags(cmd *cobra.Command) error {
	if err := registerOperationServiceServiceAddServiceItemParamFlags("", cmd); err != nil {
		return err
	}
	return nil
}

func registerOperationServiceServiceAddServiceItemParamFlags(cmdPrefix string, cmd *cobra.Command) error {

	var serviceItemFlagName string
	if cmdPrefix == "" {
		serviceItemFlagName = "serviceItem"
	} else {
		serviceItemFlagName = fmt.Sprintf("%v.serviceItem", cmdPrefix)
	}

	_ = cmd.PersistentFlags().String(serviceItemFlagName, "", "Optional json string for [serviceItem]. service item")

	// add flags for body
	if err := registerModelServiceFlags(0, "service", cmd); err != nil {
		return err
	}

	return nil
}

func retrieveOperationServiceServiceAddServiceItemFlag(m *service.ServiceAddParams, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	if cmd.Flags().Changed("serviceItem") {
		// Read serviceItem string from cmd and unmarshal
		serviceItemValueStr, err := cmd.Flags().GetString("serviceItem")
		if err != nil {
			return err, false
		}

		serviceItemValue := models.Service{}
		if err := json.Unmarshal([]byte(serviceItemValueStr), &serviceItemValue); err != nil {
			return fmt.Errorf("cannot unmarshal serviceItem string in models.Service: %v", err), false
		}
		m.ServiceItem = &serviceItemValue
	}
	serviceItemValueModel := m.ServiceItem
	if swag.IsZero(serviceItemValueModel) {
		serviceItemValueModel = &models.Service{}
	}
	err, added := retrieveModelServiceFlags(0, serviceItemValueModel, "service", cmd)
	if err != nil {
		return err, false
	}
	if added {
		m.ServiceItem = serviceItemValueModel
	}
	if dryRun && debug {

		serviceItemValueDebugBytes, err := json.Marshal(m.ServiceItem)
		if err != nil {
			return err, false
		}
		logDebugf("ServiceItem dry-run payload: %v", string(serviceItemValueDebugBytes))
	}
	retAdded = retAdded || added

	return nil, retAdded
}

// parseOperationServiceServiceAddResult parses request result and return the string content
func parseOperationServiceServiceAddResult(resp0 *service.ServiceAddCreated, respErr error) (string, error) {
	if respErr != nil {

		var iResp0 interface{} = respErr
		resp0, ok := iResp0.(*service.ServiceAddCreated)
		if ok {
			if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
				msgStr, err := json.Marshal(resp0.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		var iResp1 interface{} = respErr
		resp1, ok := iResp1.(*service.ServiceAddBadRequest)
		if ok {
			if !swag.IsZero(resp1) && !swag.IsZero(resp1.Payload) {
				msgStr, err := json.Marshal(resp1.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		// Non schema case: warning serviceAddUnauthorized is not supported

		// Non schema case: warning serviceAddForbidden is not supported

		// Non schema case: warning serviceAddConflict is not supported

		var iResp5 interface{} = respErr
		resp5, ok := iResp5.(*service.ServiceAddServiceUnavailable)
		if ok {
			if !swag.IsZero(resp5) && !swag.IsZero(resp5.Payload) {
				msgStr, err := json.Marshal(resp5.Payload)
				if err != nil {
					return "", err
				}
				return string(msgStr), nil
			}
		}

		return "", respErr
	}

	if !swag.IsZero(resp0) && !swag.IsZero(resp0.Payload) {
		msgStr, err := json.Marshal(resp0.Payload)
		if err != nil {
			return "", err
		}
		return string(msgStr), nil
	}

	return "", nil
}
