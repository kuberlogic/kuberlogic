// Code generated by go-swagger; DO NOT EDIT.

package logs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/kuberlogic/kuberlogic/modules/dynamic-apiserver/pkg/generated/models"
)

// LogListOKCode is the HTTP code returned for type LogListOK
const LogListOKCode int = 200

/*LogListOK search results matching criteria

swagger:response logListOK
*/
type LogListOK struct {

	/*
	  In: Body
	*/
	Payload models.Logs `json:"body,omitempty"`
}

// NewLogListOK creates LogListOK with default headers values
func NewLogListOK() *LogListOK {

	return &LogListOK{}
}

// WithPayload adds the payload to the log list o k response
func (o *LogListOK) WithPayload(payload models.Logs) *LogListOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the log list o k response
func (o *LogListOK) SetPayload(payload models.Logs) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *LogListOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = models.Logs{}
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// LogListBadRequestCode is the HTTP code returned for type LogListBadRequest
const LogListBadRequestCode int = 400

/*LogListBadRequest bad input parameter

swagger:response logListBadRequest
*/
type LogListBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewLogListBadRequest creates LogListBadRequest with default headers values
func NewLogListBadRequest() *LogListBadRequest {

	return &LogListBadRequest{}
}

// WithPayload adds the payload to the log list bad request response
func (o *LogListBadRequest) WithPayload(payload *models.Error) *LogListBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the log list bad request response
func (o *LogListBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *LogListBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// LogListUnauthorizedCode is the HTTP code returned for type LogListUnauthorized
const LogListUnauthorizedCode int = 401

/*LogListUnauthorized bad authentication

swagger:response logListUnauthorized
*/
type LogListUnauthorized struct {
}

// NewLogListUnauthorized creates LogListUnauthorized with default headers values
func NewLogListUnauthorized() *LogListUnauthorized {

	return &LogListUnauthorized{}
}

// WriteResponse to the client
func (o *LogListUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(401)
}

// LogListForbiddenCode is the HTTP code returned for type LogListForbidden
const LogListForbiddenCode int = 403

/*LogListForbidden bad permissions

swagger:response logListForbidden
*/
type LogListForbidden struct {
}

// NewLogListForbidden creates LogListForbidden with default headers values
func NewLogListForbidden() *LogListForbidden {

	return &LogListForbidden{}
}

// WriteResponse to the client
func (o *LogListForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(403)
}

// LogListUnprocessableEntityCode is the HTTP code returned for type LogListUnprocessableEntity
const LogListUnprocessableEntityCode int = 422

/*LogListUnprocessableEntity bad validation

swagger:response logListUnprocessableEntity
*/
type LogListUnprocessableEntity struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewLogListUnprocessableEntity creates LogListUnprocessableEntity with default headers values
func NewLogListUnprocessableEntity() *LogListUnprocessableEntity {

	return &LogListUnprocessableEntity{}
}

// WithPayload adds the payload to the log list unprocessable entity response
func (o *LogListUnprocessableEntity) WithPayload(payload *models.Error) *LogListUnprocessableEntity {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the log list unprocessable entity response
func (o *LogListUnprocessableEntity) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *LogListUnprocessableEntity) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(422)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// LogListServiceUnavailableCode is the HTTP code returned for type LogListServiceUnavailable
const LogListServiceUnavailableCode int = 503

/*LogListServiceUnavailable internal server error

swagger:response logListServiceUnavailable
*/
type LogListServiceUnavailable struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewLogListServiceUnavailable creates LogListServiceUnavailable with default headers values
func NewLogListServiceUnavailable() *LogListServiceUnavailable {

	return &LogListServiceUnavailable{}
}

// WithPayload adds the payload to the log list service unavailable response
func (o *LogListServiceUnavailable) WithPayload(payload *models.Error) *LogListServiceUnavailable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the log list service unavailable response
func (o *LogListServiceUnavailable) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *LogListServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(503)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
