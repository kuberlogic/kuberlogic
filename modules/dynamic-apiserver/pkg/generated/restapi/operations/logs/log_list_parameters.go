// Code generated by go-swagger; DO NOT EDIT.

package logs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewLogListParams creates a new LogListParams object
//
// There are no default values defined in the spec.
func NewLogListParams() LogListParams {

	return LogListParams{}
}

// LogListParams contains all the bound params for the log list operation
// typically these are obtained from a http.Request
//
// swagger:parameters logList
type LogListParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*kuberlogic pod container name to query logs by
	  In: query
	*/
	ContainerName *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewLogListParams() beforehand.
func (o *LogListParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qContainerName, qhkContainerName, _ := qs.GetOK("ContainerName")
	if err := o.bindContainerName(qContainerName, qhkContainerName, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindContainerName binds and validates parameter ContainerName from query.
func (o *LogListParams) bindContainerName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.ContainerName = &raw

	if err := o.validateContainerName(formats); err != nil {
		return err
	}

	return nil
}

// validateContainerName carries on validations for parameter ContainerName
func (o *LogListParams) validateContainerName(formats strfmt.Registry) error {

	if err := validate.EnumCase("ContainerName", "query", *o.ContainerName, []interface{}{"manager", "kube-rbac-proxy", "apiserver", "chargebee-integration"}, true); err != nil {
		return err
	}

	return nil
}
