// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BackupConfig backup config
//
// swagger:model BackupConfig
type BackupConfig struct {

	// aws access key id
	// Required: true
	AwsAccessKeyID *string `json:"aws_access_key_id"`

	// aws secret access key
	// Required: true
	AwsSecretAccessKey *string `json:"aws_secret_access_key"`

	// bucket
	// Required: true
	Bucket *string `json:"bucket"`

	// enabled
	// Required: true
	Enabled *bool `json:"enabled"`

	// endpoint
	// Required: true
	Endpoint *string `json:"endpoint"`

	// region
	Region string `json:"region,omitempty"`

	// schedule
	// Required: true
	Schedule *string `json:"schedule"`
}

// Validate validates this backup config
func (m *BackupConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAwsAccessKeyID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAwsSecretAccessKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBucket(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchedule(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupConfig) validateAwsAccessKeyID(formats strfmt.Registry) error {

	if err := validate.Required("aws_access_key_id", "body", m.AwsAccessKeyID); err != nil {
		return err
	}

	return nil
}

func (m *BackupConfig) validateAwsSecretAccessKey(formats strfmt.Registry) error {

	if err := validate.Required("aws_secret_access_key", "body", m.AwsSecretAccessKey); err != nil {
		return err
	}

	return nil
}

func (m *BackupConfig) validateBucket(formats strfmt.Registry) error {

	if err := validate.Required("bucket", "body", m.Bucket); err != nil {
		return err
	}

	return nil
}

func (m *BackupConfig) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *BackupConfig) validateEndpoint(formats strfmt.Registry) error {

	if err := validate.Required("endpoint", "body", m.Endpoint); err != nil {
		return err
	}

	return nil
}

func (m *BackupConfig) validateSchedule(formats strfmt.Registry) error {

	if err := validate.Required("schedule", "body", m.Schedule); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BackupConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupConfig) UnmarshalBinary(b []byte) error {
	var res BackupConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
