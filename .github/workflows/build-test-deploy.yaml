name: Build / In-cluster tests / Deploy
on:
  workflow_call:
    inputs:
      DEV_BUILD:
        required: true
        type: boolean
      PUBLISH_DEV_BUILD:
        required: false
        type: boolean
      PUBLISH_PROD_BUILD:
        required: false
        type: boolean
    secrets:
      REGISTRY_SERVER:
        required: true
      REGISTRY_USER:
        required: true
      REGISTRY_PASSWORD:
        required: true

jobs:
  build:
    name: Build images
    runs-on: ubuntu-latest
    env:
      DEV_BUILD: ${{ inputs.DEV_BUILD }}
      GOPATH: /tmp/go
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          # 0 - all history, it uses in generating part of BUILD in version
          fetch-depth: 0

      - name: Checkout from PR
        if: ${{ github.event.issue.pull_request }}
        run: hub pr checkout ${{ github.event.issue.number }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/setup-go@v2
        with:
          go-version: '1.16.0'

      - name: Cache Go modules
        uses: actions/cache@v2
        with:
          path: ${{ env.GOPATH }}
          key: go-cache-${{ github.run_id }}
          restore-keys: |
            go-cache-

      - name: Cache CLI
        uses: actions/cache@v2
        with:
          path: ./modules/dynamic-apiserver/bin
          key: cli-${{ github.run_id }}

      - name: Build CLI
        working-directory: ./modules/dynamic-apiserver
        run: |
          make build-cli

      - name: Build images
        run: |
          ls -la .
          for module in dynamic-operator dynamic-apiserver chargebee-integration; do \
            cd ./modules/${module}; \
            make docker-build ;\
            cd - ;\
          done

      - name: Login to Docker Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_SERVER }}
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Save operator image's cache
        run: |
          for module in dynamic-operator dynamic-apiserver chargebee-integration; do \
            cd ./modules/${module}; \
            make docker-push-cache ;\
            cd - ;\
          done

  setup_and_test:
    name: Setup and test
    runs-on: ubuntu-latest
    needs: build
    env:
      DEV_BUILD: ${{ inputs.DEV_BUILD }}
    steps:
      - uses: actions/setup-go@v2
        with:
          go-version: '1.16.0'

      - name: Checkout
        uses: actions/checkout@v2
        with:
          # 0 - all history, it uses in generating part of BUILD in version
          fetch-depth: 0

      - name: Checkout from PR
        if: ${{ github.event.issue.pull_request }}
        run: hub pr checkout ${{ github.event.issue.number }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Minikube
        uses: manusa/actions-setup-minikube@v2.7.0
        with:
          minikube version: 'v1.26.1'
          kubernetes version: 'v1.24.3'
          github token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install kong as ingress controller
        run: |
          kubectl create -f https://bit.ly/k4k8s

      - name: Restore CLI
        uses: actions/cache@v2
        with:
          path: ./modules/dynamic-apiserver/bin
          key: cli-${{ github.run_id }}

      - name: Restore cached images
        run: |
          for module in dynamic-operator dynamic-apiserver chargebee-integration; do \
            cd ./modules/${module}; \
            make docker-restore-cache ;\
            cd - ;\
          done

      - name: Install kustomize
        working-directory: ./modules/dynamic-operator
        run: |
          make kustomize
          install -b bin/kustomize /usr/local/bin

      - name: Run the installer
        run: |
          cd modules/dynamic-operator && make deploy-velero && cd -
          ./modules/dynamic-apiserver/bin/kuberlogic_x86_64_linux install \
          --non-interactive \
          --ingress_class=kong \
          --storage_class=standard \
          --docker_compose=./modules/dynamic-operator/config/manager/docker-compose.yaml \
          --kuberlogic_domain=kuberlogic.local \
          --backups_enabled

      - name: Run the tests in cluster
        working-directory: ./modules/dynamic-operator
        run: |
          make cluster-test

      - name: Collect diagnostic information
        if: ${{ always() }}
        run: |
          ./modules/dynamic-apiserver/bin/kuberlogic_x86_64_linux diag

      - name: Archive test artifacts
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: kuberlogic-diag
          path: |
            kuberlogic-diag*.zip

  release:
    name: Release images
    runs-on: ubuntu-latest
    needs: setup_and_test
    env:
      DEV_BUILD: ${{ inputs.DEV_BUILD }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          # 0 - all history, it uses in generating part of BUILD in version
          fetch-depth: 0

      - name: Checkout from PR
        if: ${{ github.event.issue.pull_request }}
        run: hub pr checkout ${{ github.event.issue.number }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Docker Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.REGISTRY_SERVER }}
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Restore cached images
        run: |
          for module in dynamic-operator dynamic-apiserver chargebee-integration; do \
            cd ./modules/${module}; \
            make docker-restore-cache ;\
            cd - ;\
          done

      - name: Push the new images
        run: |
          for module in dynamic-operator dynamic-apiserver chargebee-integration; do \
            cd ./modules/${module}; \
            make docker-push ;\
            cd - ;\
          done

      - name: Restore CLI
        id: cache-installer
        uses: actions/cache@v2
        with:
          path: ./modules/dynamic-apiserver/bin
          key: cli-${{ github.run_id }}

      - name: Release (dev)
        uses: marvinpinto/action-automatic-releases@v1.2.1
        if: steps.cache-installer.outputs.cache-hit == 'true' && inputs.PUBLISH_DEV_BUILD
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: true
          title: "Development Build"
          files: |
            ./modules/dynamic-apiserver/bin/kuberlogic_*

      - name: Release
        uses: anton-yurchenko/git-release@v4.2.4
        if: steps.cache-installer.outputs.cache-hit == 'true' && inputs.PUBLISH_PROD_BUILD
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PRE_RELEASE: true
          files: |
            ./modules/dynamic-apiserver/bin/kuberlogic_*
