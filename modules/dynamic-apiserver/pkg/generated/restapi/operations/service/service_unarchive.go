// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/kuberlogic/kuberlogic/modules/dynamic-apiserver/pkg/generated/models"
)

// ServiceUnarchiveHandlerFunc turns a function with the right signature into a service unarchive handler
type ServiceUnarchiveHandlerFunc func(ServiceUnarchiveParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn ServiceUnarchiveHandlerFunc) Handle(params ServiceUnarchiveParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// ServiceUnarchiveHandler interface for that can handle valid service unarchive params
type ServiceUnarchiveHandler interface {
	Handle(ServiceUnarchiveParams, *models.Principal) middleware.Responder
}

// NewServiceUnarchive creates a new http.Handler for the service unarchive operation
func NewServiceUnarchive(ctx *middleware.Context, handler ServiceUnarchiveHandler) *ServiceUnarchive {
	return &ServiceUnarchive{Context: ctx, Handler: handler}
}

/* ServiceUnarchive swagger:route POST /services/{ServiceID}/unarchive service serviceUnarchive

unarchive service

unarchive service (for example, if user subscription resumed from canceled state)

*/
type ServiceUnarchive struct {
	Context *middleware.Context
	Handler ServiceUnarchiveHandler
}

func (o *ServiceUnarchive) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewServiceUnarchiveParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
