// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/kuberlogic/operator/modules/apiserver/internal/generated/models"
)

// DatabaseCreateCreatedCode is the HTTP code returned for type DatabaseCreateCreated
const DatabaseCreateCreatedCode int = 201

/*DatabaseCreateCreated item is created

swagger:response databaseCreateCreated
*/
type DatabaseCreateCreated struct {
}

// NewDatabaseCreateCreated creates DatabaseCreateCreated with default headers values
func NewDatabaseCreateCreated() *DatabaseCreateCreated {

	return &DatabaseCreateCreated{}
}

// WriteResponse to the client
func (o *DatabaseCreateCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(201)
}

// DatabaseCreateBadRequestCode is the HTTP code returned for type DatabaseCreateBadRequest
const DatabaseCreateBadRequestCode int = 400

/*DatabaseCreateBadRequest invalid input, object invalid

swagger:response databaseCreateBadRequest
*/
type DatabaseCreateBadRequest struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDatabaseCreateBadRequest creates DatabaseCreateBadRequest with default headers values
func NewDatabaseCreateBadRequest() *DatabaseCreateBadRequest {

	return &DatabaseCreateBadRequest{}
}

// WithPayload adds the payload to the database create bad request response
func (o *DatabaseCreateBadRequest) WithPayload(payload *models.Error) *DatabaseCreateBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the database create bad request response
func (o *DatabaseCreateBadRequest) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DatabaseCreateBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DatabaseCreateUnauthorizedCode is the HTTP code returned for type DatabaseCreateUnauthorized
const DatabaseCreateUnauthorizedCode int = 401

/*DatabaseCreateUnauthorized bad authentication

swagger:response databaseCreateUnauthorized
*/
type DatabaseCreateUnauthorized struct {
}

// NewDatabaseCreateUnauthorized creates DatabaseCreateUnauthorized with default headers values
func NewDatabaseCreateUnauthorized() *DatabaseCreateUnauthorized {

	return &DatabaseCreateUnauthorized{}
}

// WriteResponse to the client
func (o *DatabaseCreateUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(401)
}

// DatabaseCreateForbiddenCode is the HTTP code returned for type DatabaseCreateForbidden
const DatabaseCreateForbiddenCode int = 403

/*DatabaseCreateForbidden bad permissions

swagger:response databaseCreateForbidden
*/
type DatabaseCreateForbidden struct {
}

// NewDatabaseCreateForbidden creates DatabaseCreateForbidden with default headers values
func NewDatabaseCreateForbidden() *DatabaseCreateForbidden {

	return &DatabaseCreateForbidden{}
}

// WriteResponse to the client
func (o *DatabaseCreateForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(403)
}

// DatabaseCreateNotFoundCode is the HTTP code returned for type DatabaseCreateNotFound
const DatabaseCreateNotFoundCode int = 404

/*DatabaseCreateNotFound item not found

swagger:response databaseCreateNotFound
*/
type DatabaseCreateNotFound struct {
}

// NewDatabaseCreateNotFound creates DatabaseCreateNotFound with default headers values
func NewDatabaseCreateNotFound() *DatabaseCreateNotFound {

	return &DatabaseCreateNotFound{}
}

// WriteResponse to the client
func (o *DatabaseCreateNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(404)
}

// DatabaseCreateConflictCode is the HTTP code returned for type DatabaseCreateConflict
const DatabaseCreateConflictCode int = 409

/*DatabaseCreateConflict item already exists

swagger:response databaseCreateConflict
*/
type DatabaseCreateConflict struct {
}

// NewDatabaseCreateConflict creates DatabaseCreateConflict with default headers values
func NewDatabaseCreateConflict() *DatabaseCreateConflict {

	return &DatabaseCreateConflict{}
}

// WriteResponse to the client
func (o *DatabaseCreateConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(409)
}

// DatabaseCreateServiceUnavailableCode is the HTTP code returned for type DatabaseCreateServiceUnavailable
const DatabaseCreateServiceUnavailableCode int = 503

/*DatabaseCreateServiceUnavailable internal server error

swagger:response databaseCreateServiceUnavailable
*/
type DatabaseCreateServiceUnavailable struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDatabaseCreateServiceUnavailable creates DatabaseCreateServiceUnavailable with default headers values
func NewDatabaseCreateServiceUnavailable() *DatabaseCreateServiceUnavailable {

	return &DatabaseCreateServiceUnavailable{}
}

// WithPayload adds the payload to the database create service unavailable response
func (o *DatabaseCreateServiceUnavailable) WithPayload(payload *models.Error) *DatabaseCreateServiceUnavailable {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the database create service unavailable response
func (o *DatabaseCreateServiceUnavailable) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DatabaseCreateServiceUnavailable) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(503)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
