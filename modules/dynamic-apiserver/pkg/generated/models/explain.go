// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Explain explain
//
// swagger:model Explain
type Explain struct {

	// ingress
	Ingress *ExplainIngress `json:"ingress,omitempty"`

	// pod
	Pod *ExplainPod `json:"pod,omitempty"`

	// pvc
	Pvc *ExplainPvc `json:"pvc,omitempty"`
}

// Validate validates this explain
func (m *Explain) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIngress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePvc(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Explain) validateIngress(formats strfmt.Registry) error {
	if swag.IsZero(m.Ingress) { // not required
		return nil
	}

	if m.Ingress != nil {
		if err := m.Ingress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ingress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ingress")
			}
			return err
		}
	}

	return nil
}

func (m *Explain) validatePod(formats strfmt.Registry) error {
	if swag.IsZero(m.Pod) { // not required
		return nil
	}

	if m.Pod != nil {
		if err := m.Pod.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pod")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pod")
			}
			return err
		}
	}

	return nil
}

func (m *Explain) validatePvc(formats strfmt.Registry) error {
	if swag.IsZero(m.Pvc) { // not required
		return nil
	}

	if m.Pvc != nil {
		if err := m.Pvc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pvc")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pvc")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this explain based on the context it is used
func (m *Explain) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIngress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePvc(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Explain) contextValidateIngress(ctx context.Context, formats strfmt.Registry) error {

	if m.Ingress != nil {
		if err := m.Ingress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ingress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ingress")
			}
			return err
		}
	}

	return nil
}

func (m *Explain) contextValidatePod(ctx context.Context, formats strfmt.Registry) error {

	if m.Pod != nil {
		if err := m.Pod.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pod")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pod")
			}
			return err
		}
	}

	return nil
}

func (m *Explain) contextValidatePvc(ctx context.Context, formats strfmt.Registry) error {

	if m.Pvc != nil {
		if err := m.Pvc.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pvc")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pvc")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Explain) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Explain) UnmarshalBinary(b []byte) error {
	var res Explain
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ExplainIngress explain ingress
//
// swagger:model ExplainIngress
type ExplainIngress struct {

	// error
	Error string `json:"error,omitempty"`

	// hosts
	Hosts []string `json:"hosts"`

	// ingress class
	IngressClass string `json:"ingressClass,omitempty"`
}

// Validate validates this explain ingress
func (m *ExplainIngress) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this explain ingress based on context it is used
func (m *ExplainIngress) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ExplainIngress) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExplainIngress) UnmarshalBinary(b []byte) error {
	var res ExplainIngress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ExplainPod explain pod
//
// swagger:model ExplainPod
type ExplainPod struct {

	// containers
	Containers []*ExplainPodContainersItems0 `json:"containers"`

	// error
	Error string `json:"error,omitempty"`
}

// Validate validates this explain pod
func (m *ExplainPod) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContainers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExplainPod) validateContainers(formats strfmt.Registry) error {
	if swag.IsZero(m.Containers) { // not required
		return nil
	}

	for i := 0; i < len(m.Containers); i++ {
		if swag.IsZero(m.Containers[i]) { // not required
			continue
		}

		if m.Containers[i] != nil {
			if err := m.Containers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pod" + "." + "containers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("pod" + "." + "containers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this explain pod based on the context it is used
func (m *ExplainPod) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContainers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExplainPod) contextValidateContainers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Containers); i++ {

		if m.Containers[i] != nil {
			if err := m.Containers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pod" + "." + "containers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("pod" + "." + "containers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExplainPod) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExplainPod) UnmarshalBinary(b []byte) error {
	var res ExplainPod
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ExplainPodContainersItems0 explain pod containers items0
//
// swagger:model ExplainPodContainersItems0
type ExplainPodContainersItems0 struct {

	// name
	Name string `json:"name,omitempty"`

	// restart count
	RestartCount *int64 `json:"restartCount,omitempty"`

	// status
	Status string `json:"status,omitempty"`
}

// Validate validates this explain pod containers items0
func (m *ExplainPodContainersItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this explain pod containers items0 based on context it is used
func (m *ExplainPodContainersItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ExplainPodContainersItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExplainPodContainersItems0) UnmarshalBinary(b []byte) error {
	var res ExplainPodContainersItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ExplainPvc explain pvc
//
// swagger:model ExplainPvc
type ExplainPvc struct {

	// error
	Error string `json:"error,omitempty"`

	// phase
	Phase string `json:"phase,omitempty"`

	// size
	Size string `json:"size,omitempty"`

	// storage class
	StorageClass string `json:"storageClass,omitempty"`
}

// Validate validates this explain pvc
func (m *ExplainPvc) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this explain pvc based on context it is used
func (m *ExplainPvc) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ExplainPvc) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExplainPvc) UnmarshalBinary(b []byte) error {
	var res ExplainPvc
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
